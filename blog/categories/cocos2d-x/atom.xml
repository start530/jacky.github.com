<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-x | Jacky's Blog]]></title>
  <link href="http://www.fusijie.com/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://www.fusijie.com/"/>
  <updated>2014-05-06T22:12:34+08:00</updated>
  <id>http://www.fusijie.com/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十五】《我叫MT offline》Demo]]></title>
    <link href="http://www.fusijie.com/blog/2014/02/25/play-cocos2dx-35/"/>
    <updated>2014-02-25T19:43:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/02/25/play-cocos2dx-35</id>
    <content type="html"><![CDATA[<h3>1.写在前面</h3>

<p><strong>这是怎样一个游戏？</strong></p>

<p>这是一个最好的时代。软件跑在硬件之前，而创意跑在软件之前。除去那些跨时代的作品（现在还没出，比如体感，识别等等和硬件强相关的游戏），现在的手游对技术的要求门槛已经大大降低了。这是个创意决定市场的时代。</p>

<p>（1）比如早些时候的愤怒小鸟，植物僵尸，水果忍者，这些是智能机刚刚诞生的时候出来的，可以说是借iphone引领的触屏之风顺势而行火了一把，这种机会可遇不可求。</p>

<p>（2）再如飞机大战，FlappyBird，这些是利用怀旧风，无差别竞技以及用户口碑营销堆起来的游戏，这靠的要么后台硬有干爹，要么祖坟正运气好，如果都没有，想火也很难。</p>

<p>（3）又如卡牌，COC，横版格斗，这些靠的是真正的创意。由此引来的一堆跟风之作就能看出来，几千万的月流水也证明了这一点，第一个想到创意，第一个抢到市场就是赢家。但是再来山寨就没意思了。</p>

<p><em>MT就是这样一款一出现就让人眼前一亮的游戏，我期待手游市场天天都能出现不一样的作品，能抓住用户的游戏，而不是反复的换皮圈钱关服走人。</em></p>

<!-- more -->


<p><strong>我为什么要写这么一个demo？</strong></p>

<p>对于一个游戏狂热份子，当《我叫MT》出来的时候，新奇的玩法，酷炫的卡牌，流畅的动画，以及WOW情结，让我找不到理由拒绝它（虽然到现在蛋疼的用户体验和反人类设计还有不少）。每个游戏都有自己的生命周期，这些是跑不掉的，或许卓越的钱还没有赚够，但我希望这款游戏最后能有一个体面的结局。</p>

<p>从MT ios一区开始，玩到现在也近一年半了。它陪伴我历经了很多事情，如人饮水冷暖自知。每个程序员都有一颗做游戏的心。在决定进入游戏行业后，我决定写个MT的demo出来，算是感谢也算是怀念。说来也巧，当初找来各种版本的《我叫MT》反编译拿游戏资源为的只是为了收集所有的卡牌图片，结果后面发现2.3以后的版本都做了资源加密处理。所以手上只有2.3版的资源，这个demo就按着2.3版做。</p>

<p><strong>《我叫MT offline》这个游戏能做什么？</strong></p>

<p>其实它什么也做不了，只是游戏的整体框架以及所有动画的demo，由于写的比较赶，很多功能都没有来得及实现，代码也写的比较粗糙。接下来我会继续完善它，我的最终目的是把它改成单机版的《我叫MT offline》。它的工作量太大了，而且体力活占大部分，所以代码模块化复用和游戏内存优化显得很重要。如果不用赔60亿我会考虑把源码推上<a href="https://github.com/fusijie">Github</a>。</p>

<p>游戏采用VS2012+cocos2d-x v2.2.0开发。</p>

<h3>2.游戏结构和效果</h3>

<p><strong>公告</strong></p>

<div align="center"><img src="http://www.fusijie.com/images/Blog/mt/announcement.png" alt="" border="0" title="4" /><br></br></div>


<p><strong>游戏</strong></p>

<center><embed src="http://player.youku.com/player.php/sid/XNjc3ODI3NjY0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></center>


<p>录了个视频，我会尽快放出apk。</p>

<p><strong>开幕故事</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/story.gif">http://www.fusijie.com/images/Blog/mt/story.gif</a></p>

<p><strong>游戏主场景</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/mainui.gif">http://www.fusijie.com/images/Blog/mt/mainui.gif</a></p>

<p><strong>英雄</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/card.gif">http://www.fusijie.com/images/Blog/mt/card.gif</a></p>

<p><strong>进化</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/evolve.gif">http://www.fusijie.com/images/Blog/mt/evolve.gif</a></p>

<p><strong>碎片</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/chip.gif">http://www.fusijie.com/images/Blog/mt/chip.gif</a></p>

<p><strong>升级</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/levelup.gif">http://www.fusijie.com/images/Blog/mt/levelup.gif</a></p>

<p><strong>奖励</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/task.gif">http://www.fusijie.com/images/Blog/mt/task.gif</a></p>

<p><strong>技能学院</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/colleage.gif">http://www.fusijie.com/images/Blog/mt/colleage.gif</a></p>

<p><strong>副本列表</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/instance.gif">http://www.fusijie.com/images/Blog/mt/instance.gif</a></p>

<p><strong>副本战斗</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/battle.gif">http://www.fusijie.com/images/Blog/mt/battle.gif</a></p>

<p><strong>竞技场</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/arena.gif">http://www.fusijie.com/images/Blog/mt/arena.gif</a></p>

<p><strong>商店</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/store.gif">http://www.fusijie.com/images/Blog/mt/store.gif</a></p>

<p><strong>单次抽奖</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleone.gif">http://www.fusijie.com/images/Blog/mt/raffleone.gif</a></p>

<p><strong>十连抽</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleten.gif">http://www.fusijie.com/images/Blog/mt/raffleten.gif</a></p>

<p><strong>好友</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/friend.gif">http://www.fusijie.com/images/Blog/mt/friend.gif</a></p>

<p><strong>攻略</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/more.gif">http://www.fusijie.com/images/Blog/mt/more.gif</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十四】绘图：CCDrawingPrimitives和CCDrawNode]]></title>
    <link href="http://www.fusijie.com/blog/2014/02/08/play-cocos2dx-34/"/>
    <updated>2014-02-08T16:10:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/02/08/play-cocos2dx-34</id>
    <content type="html"><![CDATA[<p>最近忙出翔了，这年过的也揪心。好久没来更新博客了，今天就来写一写cocos2d-x中图形的绘制。</p>

<h3>1.概述</h3>

<p>其实cocos2d-x封装了大量的opengl的绘图函数，我们可以很轻松的在游戏中调用。但是实际上我们很少会这么做，因为编码绘图的方式效率实在太低了，尤其是诸如一些高阶贝塞尔曲线之类的，官方也不建议这么做，使用图像能更有效的提高绘图效率，同时也会更为的美观，也减少了一些精灵遮挡问题和边缘锯齿问题。cocos2d-x中绘图主要有两种方式：CCDrawingPrimitives和CCDrawNode。它们都在cocos2dx\draw_nodes目录下。</p>

<!-- more -->


<h3>2.CCDrawingPrimitives（原生绘图）</h3>

<p><strong>2.1.特点</strong></p>

<p>CCDrawingPrimitives必须在节点的draw函数中调用，draw函数每帧被调用一次，主要做一些绘制的工作。但这并不意味着它就是静态不可改变的，我们完全可以通过修改描绘内容的方式来动态绘图。比如可以直接在用触摸的方式在屏幕上绘图。</p>

<p>另外，使用CCDrawingPrimitives绘图默认的Z-Order是0，所以可能会被其他节点覆盖，因为它无法设置Z-Order，所以只能通过设置其他节点的Z-Order为负值使得绘图在最前端得以看见。</p>

<p><strong>2.2.API</strong></p>

<p>``` cpp CCDrawingPrimitives API</p>

<pre><code>//绘制一个给定x，y值的点  
void CC_DLL ccDrawPoint( const CCPoint&amp; point );  

//绘制一组点  
void CC_DLL ccDrawPoints( const CCPoint *points, unsigned int numberOfPoints );  

//绘制一条给定起始点和目标点的直线  
void CC_DLL ccDrawLine( const CCPoint&amp; origin, const CCPoint&amp; destination );  

//绘制一个给定起始点和目标点的矩形  
void CC_DLL ccDrawRect( CCPoint origin, CCPoint destination );  

//绘制一个给定起始点和目标点和颜色的矩形  
void CC_DLL ccDrawSolidRect( CCPoint origin, CCPoint destination, ccColor4F color );  

//绘制一个给定一组点的多边形，可以是闭合或开放  
void CC_DLL ccDrawPoly( const CCPoint *vertices, unsigned int numOfVertices, bool closePolygon );  

//绘制一个给定一组点和颜色的多边形  
void CC_DLL ccDrawSolidPoly( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color );  

//绘制一个给定中心，半径，分段数的圆  
void CC_DLL ccDrawCircle( const CCPoint&amp; center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY);  
void CC_DLL ccDrawCircle( const CCPoint&amp; center, float radius, float angle, unsigned int segments, bool drawLineToCenter);  

//绘制一个带一个控制点的贝塞尔曲线（二次）  
void CC_DLL ccDrawQuadBezier(const CCPoint&amp; origin, const CCPoint&amp; control, const CCPoint&amp; destination, unsigned int segments);  

//绘制一个带两个控制点的贝塞尔曲线（高阶）  
void CC_DLL ccDrawCubicBezier(const CCPoint&amp; origin, const CCPoint&amp; control1, const CCPoint&amp; control2, const CCPoint&amp; destination, unsigned int segments);  

//绘制默认曲率的基数样条  
void CC_DLL ccDrawCatmullRom( CCPointArray *arrayOfControlPoints, unsigned int segments );  

//绘制指定曲率的基数样条  
void CC_DLL ccDrawCardinalSpline( CCPointArray *config, float tension,  unsigned int segments );  

//设置绘制颜色，4个byte型  
void CC_DLL ccDrawColor4B( GLubyte r, GLubyte g, GLubyte b, GLubyte a );  

//设置绘制颜色，4个float型  
void CC_DLL ccDrawColor4F( GLfloat r, GLfloat g, GLfloat b, GLfloat a );  

//设置点大小，默认为1  
void CC_DLL ccPointSize( GLfloat pointSize );  
</code></pre>

<p>```</p>

<p><strong>2.3.示例</strong></p>

<p>代码使用的是TestCpp中代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170619906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>3.CCDrawNode（绘图节点）</h3>

<p><strong>3.1.特点</strong></p>

<p>CCDrawNode从CCNode继承而来，是一个图形绘制的节点类，它提供了几个常用的点线面函数方便绘图，其实在之前的游戏遮罩一文中就有写过。相较于CCDrawingPrimitives，这里更推荐使用CCDrawNode。</p>

<p><em>（1）它将绘图封装为普通节点的方式进行处理，符合cocos2d-x树状编程的思想，同时也避免了一些遮盖的问题。</em></p>

<p><em>（2）不需要在draw函数中调用。</em></p>

<p><em>（3）使用批处理绘图，提高了绘图效率。</em></p>

<p><strong>3.2.API</strong></p>

<p>``` cpp CCDrawNode API</p>

<pre><code>//绘制一个指定位置，大小，颜色的点  
void drawDot(const CCPoint &amp;pos, float radius, const ccColor4F &amp;color);  

//绘制一个指定起点终点，大小，颜色的点  
void drawSegment(const CCPoint &amp;from, const CCPoint &amp;to, float radius, const ccColor4F &amp;color);  

//绘制一个指定点，填充颜色，边框颜色的，边框宽度的多边形  
void drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &amp;fillColor, float borderWidth, const ccColor4F &amp;borderColor);  
</code></pre>

<p>```</p>

<p><strong>3.3.示例</strong></p>

<p>代码也是TestCpp中的代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170658078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>4.源码下载</h3>

<p>可以自己看TestCpp示例，也可以从<a href="http://download.csdn.net/detail/jackyvincefu/6903357">这里</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十三】游戏嵌入Webview网页]]></title>
    <link href="http://www.fusijie.com/blog/2013/12/26/play-cocos2dx-33/"/>
    <updated>2013-12-26T14:11:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/12/26/play-cocos2dx-33</id>
    <content type="html"><![CDATA[<p>手游《我叫MT》一开始会弹出一个游戏公告，有玩过的肯定都蛮熟悉的，这就是webview，就是一个网页。由于webview和平台相关，这里就介绍下cocos2d-x如何嵌入andorid的webview控件，在cocos2d-x中显示网页。</p>

<h3>1.Jni</h3>

<p>Jni这里我就不再多说了。可用参考<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">wikipedia</a>，或者<a href="http://blog.csdn.net/jackystudio/article/details/12150907">微信飞机大战的移植篇</a>。通过Jni，可以实现在cocos2d-x中调用Android的API，当然也可以进行传值。</p>

<h3>2.Android使用webview</h3>

<p>直接上代码。主要是处理布局和webview使用的问题。这里采用代码布局。以下操作在android的主类（cocos2dxActivity）中处理。</p>

<!-- more -->


<p><strong>2.1.添加成员变量</strong></p>

<p>整个布局的结构是最底层一个FrameLayout，ImageView控件放置在FrameLayout上。然后之上是一个LinearLayout用来放置关闭按钮，LinearLayout往下是Webview控件。</p>

<p>``` java 成员变量</p>

<pre><code>static Test test  = null;//Test实例  
WebView m_webView;//WebView控件  
ImageView m_imageView;//ImageView控件  
FrameLayout m_webLayout;//FrameLayout布局  
LinearLayout m_topLayout;//LinearLayout布局  
Button m_backButton;//关闭按钮  
</code></pre>

<p>```</p>

<p><strong>2.2.OnCreate中添加FrameLayout布局</strong></p>

<p>``` java 添加FrameLayout布局</p>

<pre><code>protected void onCreate(Bundle savedInstanceState){  
    super.onCreate(savedInstanceState);  
    test=this;  

    //初始化一个空布局  
    m_webLayout = new FrameLayout(this);  
    FrameLayout.LayoutParams lytp = new FrameLayout.LayoutParams(800,640);  
    lytp .gravity = Gravity.CENTER;  
    addContentView(m_webLayout, lytp);  
}
</code></pre>

<p>```</p>

<p><strong>2.3.返回实例</strong></p>

<p>``` java 返回实例</p>

<pre><code>public static Test getInstance() {  
    Log.v("TestJacky","getInstance");  
    return test;  
}  
</code></pre>

<p>```</p>

<p><strong>2.4.显示webview</strong></p>

<p>``` java 显示webview</p>

<pre><code>public void openWebview() {  
    Log.v("TestJacky", "openWebView");  
    this.runOnUiThread(new Runnable() {//在主线程里添加别的控件  
        public void run() {     
            //初始化webView  
            m_webView = new WebView(test);  
            //设置webView能够执行javascript脚本  
            m_webView.getSettings().setJavaScriptEnabled(true);              
            //设置可以支持缩放  
            m_webView.getSettings().setSupportZoom(true);//设置出现缩放工具  
            m_webView.getSettings().setBuiltInZoomControls(true);  
            //载入URL  
            m_webView.loadUrl("http://m.blog.csdn.net/blog/jackyvincefu/");  
            //使页面获得焦点  
            m_webView.requestFocus();  
            //如果页面中链接，如果希望点击链接继续在当前browser中响应  
            m_webView.setWebViewClient(new WebViewClient(){         
                public boolean shouldOverrideUrlLoading(WebView view, String url) {     
                    if(url.indexOf("tel:")&lt;0){  
                        view.loadUrl(url);   
                }  
                return true;         
            }      
        });  

        //背景图  
        m_imageView = new ImageView(test);  
        m_imageView.setImageResource(R.drawable.bkgnd);  
        m_imageView.setScaleType(ImageView.ScaleType.FIT_XY);  
        //初始化线性布局 里面加按钮和webView  
        m_topLayout = new LinearLayout(test);        
        m_topLayout.setOrientation(LinearLayout.VERTICAL);  
        //初始化返回按钮  
        m_backButton = new Button(test);  
        m_backButton.setBackgroundResource(R.drawable.btn);  
        LinearLayout.LayoutParams lypt=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);  
        lypt.gravity=Gravity.RIGHT;  
        m_backButton.setLayoutParams(lypt);              
        m_backButton.setOnClickListener(new OnClickListener() {                      
            public void onClick(View v) {  
                removeWebView();  
            }  
        });  
        //把image加到主布局里  
        m_webLayout.addView(m_imageView);  
        //把webView加入到线性布局  
        m_topLayout.addView(m_backButton);  
        m_topLayout.addView(m_webView);                  
        //再把线性布局加入到主布局  
        m_webLayout.addView(m_topLayout);  
        }  
    });  
}
</code></pre>

<p>```</p>

<p><strong>2.5.移除webview</strong></p>

<p>``` java 移除webview</p>

<pre><code>public void removeWebView() {                
    m_webLayout.removeView(m_imageView);  
    m_imageView.destroyDrawingCache();  

    m_webLayout.removeView(m_topLayout);  
    m_topLayout.destroyDrawingCache();  

    m_topLayout.removeView(m_webView);  
    m_webView.destroy();  

    m_topLayout.removeView(m_backButton);  
    m_backButton.destroyDrawingCache();  
}  
</code></pre>

<p>```</p>

<p><strong>2.6.重写返回键</strong></p>

<p>``` java 重写返回键</p>

<pre><code>public boolean onKeyDown(int keyCoder,KeyEvent event)  
{  
    //如果网页能回退则后退，如果不能后退移除WebView  
    if(m_webView.canGoBack() &amp;&amp; keyCoder == KeyEvent.KEYCODE_BACK){  
        m_webView.goBack();  
    }else{  
        removeWebView();  
    }  
    return false;        
}  
</code></pre>

<p>```</p>

<h3>3.cocos2d-x使用Jni</h3>

<p>这里直接使用HelloWorld的示例，修改了close按钮的回调函数。</p>

<p><strong>3.1.jni头文件</strong></p>

<p>``` cpp jni头文件</p>

<pre><code>#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)  
#include &lt;jni.h&gt;  
#include "platform/android/jni/JniHelper.h"  
#endif  
</code></pre>

<p>```</p>

<p><strong>3.2.Jni调用打开webview</strong></p>

<p>``` cpp Jni调用打开webview</p>

<pre><code>void HelloWorld::menuCloseCallback(CCObject* pSender)  
{  
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)  
    JniMethodInfo minfo;  
    //getStaticMethodInfo，判断Java静态函数是否存在，并且把信息保存到minfo里  
    //参数1：JniMethodInfo  
    //参数2：Java类包名+类名  
    //参数3：Java函数名称  
    //参数4：函数参数类型和返回值类型  
    bool isHave = JniHelper::getStaticMethodInfo(minfo,"com/jacky/test/Test","getInstance","()Lcom/jacky/test/Test;");  
    jobject jobj;//存对象  
    if (isHave) {  
        //这里的调用getInstance，返回Test类的对象。  
        jobj = minfo.env-&gt;CallStaticObjectMethod(minfo.classID, minfo.methodID);  

        isHave = JniHelper::getMethodInfo(minfo,"com/jacky/test/Test","openWebview","()V");  
        if (isHave) {  
            //调用openWebview, 参数1：Test对象   参数2：方法ID  
            minfo.env-&gt;CallVoidMethod(jobj, minfo.methodID);  
        }  
    }  
    #else  
        CCDirector::sharedDirector()-&gt;end();  
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)  
        exit(0);  
    #endif  
    #endif  
}  
</code></pre>

<p>```</p>

<h3>4.效果图</h3>

<p>爪机截屏的。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131226095754125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095821781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095849921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p><em>ps：这里没有处理多次打开webview的情况。可以采用Jni方法来通知cocos2d-x，也可以直接在主类中设置一个成员变量标志位，调用openWebview时设置为true，removeWebView时设置为false，在调用openWebview时检测这个标志位来决定是否打开即可。</em></p>

<h3>5.源码下载</h3>

<p>包含win32，android代码，拿掉了android交叉编译生成的obj，保留so和apk文件。</p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6770315">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十二】xml的解析]]></title>
    <link href="http://www.fusijie.com/blog/2013/12/18/play-cocos2dx-32/"/>
    <updated>2013-12-18T09:30:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/12/18/play-cocos2dx-32</id>
    <content type="html"><![CDATA[<p>cocos2d-x中对xml的解析是采用的TinyXML库，而对plist的解析同时结合了CCDictionary来处理，这里简单介绍下cocos2d-x中解析xml的两种方式，也是常用的xml两个C++解析库：TinyXML和RapidXML。xml被设计用于数据存储和传输，重点是数据内容本身，而不像html，用于表现数据。</p>

<h3>1.TinyXML</h3>

<p><strong>1.1.概况</strong></p>

<p>TinyXML的<a href="http://www.grinninglizard.com/tinyxml/">主页</a>，本来不打算介绍这个库的，因为它的解析效率并不高，但是鉴于cocos2d-x采用的就是它，所以也稍微写一下它的用法，cocos2d-x使用的是TinyXML2，Github地址<a href="https://github.com/leethomason/tinyxml2">在这里</a>。就是对TinyXML重新进行了封装，具体的区别在其github上也写的很清楚了。</p>

<!-- more -->


<p><strong>1.2.示例</strong></p>

<p>这里不介绍API，因为太多了，在线手册也都有。首先下载TinyXML库，将4个cpp文件和2个h文件加入cocos2d-x中。添加头文件时只需添加"<em>tinyxml.h</em>&ldquo;即可。</p>

<p><strong>1.2.1.xml的创建</strong></p>

<p>``` cpp xml的创建</p>

<pre><code>void TestLayer::writeTinyXML()  
{  
    TiXmlDocument* myTinyXMLDoc=new TiXmlDocument();//创建文档对象  

    TiXmlElement* rootElement=new TiXmlElement("Jacky");//创建根节点并连接到文档  
    myTinyXMLDoc-&gt;LinkEndChild(rootElement);  

    TiXmlElement* infoElement=new TiXmlElement("Info");//创建info节点并连接到根节点  
    rootElement-&gt;LinkEndChild(infoElement);  

    infoElement-&gt;SetAttribute("Name","Jacky");//为info节点设置属性  
    infoElement-&gt;SetAttribute("QQ","754505629");  
    infoElement-&gt;SetAttribute("E-mail","Geek.Jacky@Gmail.com");  

    TiXmlElement* blogElement=new TiXmlElement("blog");  
    infoElement-&gt;LinkEndChild(blogElement);//创建blog节点并连接到info节点  
    TiXmlText* blogtext=new TiXmlText("http://blog.csdn.net/jackystudio");  
    blogElement-&gt;LinkEndChild(blogtext);//为blog节点添加文本值  

    TiXmlElement* websiteElenment=new TiXmlElement("website");  
    infoElement-&gt;LinkEndChild(websiteElenment);  
    TiXmlText* websitetext=new TiXmlText("http://www.fusijie.com");  
    websiteElenment-&gt;LinkEndChild(websitetext);  

    myTinyXMLDoc-&gt;SaveFile(CCFileUtils::sharedFileUtils()-&gt;fullPathForFilename("testTiny.xml").c_str());//保存xml  

    delete myTinyXMLDoc;  
}  
</code></pre>

<p>```</p>

<p>是不是很奇怪为什么new了那么多内存，但最后只delete TixmlDocument呢？其实在TinyXML中，子节点的内存管理都由父节点进行维护，所以不必在释放内存时对每个子节点都进行释放，而只需要释放父节点即可。</p>

<p><strong>1.2.2.xml的读取</strong></p>

<p>``` cpp xml的读取</p>

<pre><code>void TestLayer::readTinyXML()  
{  
    TiXmlDocument* myTinyXMLDoc=new TiXmlDocument(CCFileUtils::sharedFileUtils()-&gt;fullPathForFilename("testTiny.xml").c_str());  
    myTinyXMLDoc-&gt;LoadFile();  

    TiXmlElement* rootElement = myTinyXMLDoc-&gt;RootElement();  //获取根节点  
    TiXmlElement* infoElement = rootElement-&gt;FirstChildElement();  // 获取Info节点    

    while (infoElement)   
    {  

        TiXmlAttribute* attributeOfinfo = infoElement-&gt;FirstAttribute();  //获得info的属性    
        while ( attributeOfinfo )   
        {    
            CCLOG("%s : %s",attributeOfinfo-&gt;Name(),attributeOfinfo-&gt;Value());//获取所有属性  
            attributeOfinfo = attributeOfinfo-&gt;Next();    
        }  

        TiXmlElement* blogElement = infoElement-&gt;FirstChildElement();//获得blog  
        CCLOG("blog : %s",blogElement-&gt;GetText());    

        TiXmlElement* websiteElement = blogElement-&gt;NextSiblingElement();//获取website    
        CCLOG("website : %s",websiteElement-&gt;GetText());    

        infoElement = infoElement-&gt;NextSiblingElement();//查找下一节点    
    }    
    delete myTinyXMLDoc;    
} 
</code></pre>

<p>```</p>

<h3>2.RapidXML</h3>

<p><strong>2.1.概况</strong></p>

<p>RapidXML的<a href="http://rapidxml.sourceforge.net/">主页</a>。在其手册中第四节<a href="http://rapidxml.sourceforge.net/manual.html#namespacerapidxml_1performance">comparison with others parsers</a>可以看到在同等条件下它的解析效率是TinyXML的30到60倍，所以如果需要解析大文件的话，RapidXML是不二之选。</p>

<p><strong>2.2.示例</strong></p>

<p>首先下载RapidXML库，将四个hpp文件都加入cocos2d-x中，在包含头文件时，4个hpp都要进行包含。</p>

<p><strong>2.2.1.xml的创建</strong></p>

<p>``` cpp xml的创建</p>

<pre><code>void TestLayer::writeRapidXML()  
{  
    rapidxml::xml_document&lt;&gt; myRapidXMLDoc;  

    rapidxml::xml_node&lt;&gt;* root = myRapidXMLDoc.allocate_node(rapidxml::node_element,"Jacky",NULL);//创建根节点  
    myRapidXMLDoc.append_node(root);//追加根节点  

    rapidxml::xml_node&lt;&gt;* info = myRapidXMLDoc.allocate_node(rapidxml::node_element,"Info",NULL);//创建info节点  
    info-&gt;append_attribute(myRapidXMLDoc.allocate_attribute("Name","Jacky"));  
    info-&gt;append_attribute(myRapidXMLDoc.allocate_attribute("QQ","754505629"));  
    info-&gt;append_attribute(myRapidXMLDoc.allocate_attribute("E-mail","Geek.Jacky@Gmail.com"));  
    root-&gt;append_node(info);//追加info节点到root  

    //创建blog和website节点并追加到root  
    rapidxml::xml_node&lt;&gt;* blog = myRapidXMLDoc.allocate_node(rapidxml::node_element,"blog","http://blog.csdn.net/jackystudio");  
    info-&gt;append_node(blog);  
    rapidxml::xml_node&lt;&gt;* website = myRapidXMLDoc.allocate_node(rapidxml::node_element,"website","http://www.fusijie.com");  
    info-&gt;append_node(website);  

    //保存xml文档  
    std::string text;  
    rapidxml::print(std::back_inserter(text), myRapidXMLDoc, 0);  
    CCLog(text.c_str());  
    std::ofstream out(CCFileUtils::sharedFileUtils()-&gt;fullPathForFilename("testRapid.xml"));  
    out &lt;&lt; myRapidXMLDoc;  
}
</code></pre>

<p>```</p>

<p><strong>2.2.2.xml的读取</strong></p>

<p>``` cpp xml的读取</p>

<pre><code>void TestLayer::readRapidXML()  
{  
    rapidxml::file&lt;&gt; fdoc(CCFileUtils::sharedFileUtils()-&gt;fullPathForFilename("testRapid.xml").c_str());//读取数据  
    CCLog(fdoc.data());  
    rapidxml::xml_document&lt;&gt; myRapidXMLDoc;  
    myRapidXMLDoc.parse&lt;0&gt;(fdoc.data());//将数据写入xml_document  

    rapidxml::xml_node&lt;&gt;* root = myRapidXMLDoc.first_node();//获取根节点  

    rapidxml::xml_node&lt;&gt;* info = root-&gt;first_node();//获取Info节点  

    rapidxml::xml_attribute&lt;&gt;* info_attr = info-&gt;first_attribute();//获取info属性  
    CCLog("%s:%s",info_attr-&gt;name(),info_attr-&gt;value());  
    CCLog("%s:%s",info_attr-&gt;next_attribute()-&gt;name(),info_attr-&gt;next_attribute()-&gt;value());  
    CCLog("%s:%s",info_attr-&gt;next_attribute()-&gt;next_attribute()-&gt;name(),info_attr-&gt;next_attribute()-&gt;next_attribute()-&gt;value());  

    rapidxml::xml_node&lt;&gt;* blog=info-&gt;first_node();//获取blog节点  
    CCLog("%s:%s",blog-&gt;name(),blog-&gt;value());  

    rapidxml::xml_node&lt;&gt;* website=blog-&gt;next_sibling();//获取website节点  
    CCLog("%s:%s",website-&gt;name(),website-&gt;value());  
}  
</code></pre>

<p>```</p>

<h3>3.生成xml的文件</h3>

<p>以上2种方式生成的xml文件内容如下：</p>

<p>``` xml 生成的xml文件</p>

<pre><code>&lt;Jacky&gt;  
    &lt;Info Name="Jacky" QQ="754505629" E-mail="Geek.Jacky@Gmail.com"&gt;  
        &lt;blog&gt;http://blog.csdn.net/jackystudio&lt;/blog&gt;  
    &lt;website&gt;http://www.fusijie.com&lt;/website&gt;  
    &lt;/Info&gt;  
&lt;/Jacky&gt;  
</code></pre>

<p>```</p>

<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6732361">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十一】服务器的网络通信编程]]></title>
    <link href="http://www.fusijie.com/blog/2013/12/17/play-cocos2dx-31/"/>
    <updated>2013-12-17T14:11:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/12/17/play-cocos2dx-31</id>
    <content type="html"><![CDATA[<p>这里采用Apache+php搭建了一个简易服务器，服务端用php语言，客户端采用cocos2d-x的CCHttpClient类通过http方式访问服务端资源。模拟了cocos2d-x提交账户和密码到服务端，服务端校验帐号密码，如果正确返回客户端成功登录，如果错误则返回错误信息，同时在服务端后台保存登录log。第一次接触php，语法上和C/C++还是蛮像的，主要是给出一个cocos2d-x网络实例，代码中并没有做一些防呆纠错措施。</p>

<h3>1.搭建Apache+php网页服务器</h3>

<p>Apche2.2 x86版:<a href="http://pan.baidu.com/s/1vNuLF">下载地址</a></p>

<p>php5.2.17版:<a href="http://pan.baidu.com/s/17sFoN">下载地址</a></p>

<p>搭建过程参见<a href="http://tech.163.com/06/0206/11/299AMBLT0009159K.html">这里</a>，这里就不安装MySQL了。</p>

<!-- more -->


<p>搭建成功后，打开<a href="http://127.0.0.1">http://127.0.0.1</a>，就可以看到"<em>It' works!</em>&ldquo;字样。同时打开Apache monitor监控Apache处于运行状态。我这里使用的80端口。</p>

<h3>2.php收集表单的方式</h3>

<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE，对应着查改增删，这里介绍GET和POST。</p>

<p>用$_GET获取表单数据，表单数据对任何人都是可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php?username=jackystudio&amp;password=123
</code></pre>

<p>用$_POST获取表单数据，表单数据则是不可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php
</code></pre>

<p>详细可见<a href="http://www.w3school.com.cn/php">w3school有关php章节</a>。</p>

<h3>3.服务器php处理代码</h3>

<p>这里我直接修改了主页index.html。会C++应该都能看懂，先是打开一个log.txt，接收到username和password，如果是username是jackystudio，password是123的话，把username和password写入log.txt，并返回登录成功，如果username或password错误时返回登录失败。如果未接收到则返回没有用户名密码。</p>

<p><strong>3.1.采用get方式代码</strong></p>

<p>``` html Get方式</p>

<pre><code>&lt;html&gt;  
    &lt;body&gt;  
        &lt;?php  
        $open=fopen("log.txt","a" ); //Save password  
        if(isset($_GET["username"]) &amp;&amp; isset($_GET["password"]))  
        {  
            if($_GET["username"]=="jackystudio" &amp;&amp; $_GET["password"]=="123")  
            {  
                fwrite($open,"Username:".$_GET["username"]);  
                fwrite($open,"\r\n");  
                fwrite($open,"Password:".$_GET["password"]);  
                echo "Login Success"; //return to client  
            }  
            else  
            {  
                fwrite($open,"Wrong Username or password!");  
                echo "Login Failed"; //return to client  
            }  
        }  
        else  
        {  
            fwrite($open,"No password");  
            echo "No Username or Password"; //return to client  
        }  
        fclose($open);  
        ?&gt;  
    &lt;/body&gt;  
&lt;/html&gt;  
</code></pre>

<p>```</p>

<p><strong>3.2.采用post方式代码</strong></p>

<p>``` html Post方式</p>

<pre><code>&lt;html&gt;  
    &lt;body&gt;  
        &lt;?php  
        $open=fopen("log.txt","a" ); //Save password  
        if(isset($_POST["username"]) &amp;&amp; isset($_POST["password"]))  
        {  
            if($_POST["username"]=="jackystudio" &amp;&amp; $_POST["password"]=="123")  
            {  
                fwrite($open,"Username:".$_POST["username"]);  
                fwrite($open,"\r\n");  
                fwrite($open,"Password:".$_POST["password"]);  
                echo "Login Success"; //return to client  
            }  
            else  
            {  
                fwrite($open,"Wrong Username or password!");  
                echo "Login Failed"; //return to client  
            }  
        }  
        else  
        {  
            fwrite($open,"No password");  
            echo "No Username or Password"; //return to client  
        }  
        fclose($open);  
        ?&gt;  
    &lt;/body&gt;  
&lt;/html&gt;  
</code></pre>

<p>```</p>

<h3>4.cocos2d-x使用CCHttpClient类进行网络请求</h3>

<p>CCHttpClient的使用这里也不赘述了，请移步官方文档How_to_use_CCHttpClient。这里在上文编辑框和点九图的基础上进行了修改。2个编辑框，分别是username和password。一个按钮点击发送请求。一个文本显示从服务器返回的结果。</p>

<p><strong>4.1.按钮请求处理</strong></p>

<p>``` cpp 按钮请求处理</p>

<pre><code>void TestLayer::btncallback( CCObject* pSender )  
{  
    bool requestType_is_get=true;//采用get方式或者post方式  
    if (requestType_is_get)  
    {  
        CCHttpRequest* request = new CCHttpRequest();//创建请求对象  
        string str1 = "127.0.0.1:80/index.html?";  
        string str2 = p_User_EditBox-&gt;getText();//获取username编辑框内容  
        string str3 = p_Psw_EditBox-&gt;getText();//获取password编辑框内容  
        string struser="username=";  
        string strpsw="&amp;password=";  
        str1=str1+struser+str2+strpsw+str3;  
        request-&gt;setUrl(str1.c_str());//设置请求的url，username和password已经包含在url中  
        request-&gt;setRequestType(CCHttpRequest::kHttpGet);//设置为Get模式  
        request-&gt;setResponseCallback(this, httpresponse_selector(TestLayer::onHttpRequestCompleted));//设置响应的回调  
        request-&gt;setTag("GET test");  
        CCHttpClient::getInstance()-&gt;send(request);//发送请求  
        request-&gt;release();//释放请求  
    }  
    else  
    {  
        CCHttpRequest* request = new CCHttpRequest();//创建请求对象  
        string str1 = "127.0.0.1:80/index.html";  
        string str2 = p_User_EditBox-&gt;getText();  
        string str3 = p_Psw_EditBox-&gt;getText();  
        string struser="username=";  
        string strpsw="&amp;password=";  
        str2=struser+str2+strpsw+str3;  

        request-&gt;setUrl(str1.c_str());//设置请求的url，只是请求页面的url，并不包含username和password  
        request-&gt;setRequestType(CCHttpRequest::kHttpPost);//设置为Post模式  
        request-&gt;setResponseCallback(this, httpresponse_selector(TestLayer::onHttpRequestCompleted));//设置响应的回调  

        const char* postData = str2.c_str();  
        request-&gt;setRequestData(postData, strlen(postData));//设置请求数据，也就是username和password  

        request-&gt;setTag("POST test");  
        CCHttpClient::getInstance()-&gt;send(request);//发送请求  
        request-&gt;release();//释放请求  
    }  
}  
</code></pre>

<p>```</p>

<p><strong>4.2.响应回调处理</strong></p>

<p>``` cpp 响应回调处理</p>

<pre><code>void TestLayer::onHttpRequestCompleted( CCHttpClient* client, CCHttpResponse* response )  
{  
    if (!response-&gt;isSucceed())//如果响应失败，输出错误信息  
    {    
        CCString strError;  
        strError.initWithFormat("Receive Error! \n%s\n",response-&gt;getErrorBuffer());  
        m_labelStatusCode-&gt;setString(strError.getCString());  
        return ;     
    }    

    std::vector&lt;char&gt; *buffer = response-&gt;getResponseData();//接收响应信息  
    string recieveData;  
    for (unsigned int i = 0; i &lt; buffer-&gt;size(); i++)  
    {    
        recieveData += (*buffer)[i];    
    }  
    size_t begin= recieveData.find("&lt;body&gt;")+6;//这里简单处理，获取&lt;body&gt;标签内数据，即是响应内容  
    size_t end= recieveData.find("&lt;/body&gt;");  
    string result(recieveData,begin,end-begin);  
    m_labelStatusCode-&gt;setString(result.c_str());  
}  
</code></pre>

<p>```</p>

<h3>5.效果图</h3>

<p><strong>5.1.Apache运行（Get和Post两种效果都是一样的）</strong></p>

<p><em>（1）帐号密码正确时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145727843" alt="" border="0" title="登录成功" /><br></br></div>


<p><em>（2）帐号密码错误时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145557531" alt="" border="0" title="登录失败" /><br></br></div>


<p><strong>5.2.关闭Apache</strong></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145740578" alt="" border="0" title="服务器关闭" /><br></br></div>


<h3>6.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6713471">下载地址</a></p>
]]></content>
  </entry>
  
</feed>
