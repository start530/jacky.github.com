<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Star's Blog]]></title>
  <link href="http://start530.github.io/atom.xml" rel="self"/>
  <link href="http://start530.github.io/"/>
  <updated>2014-05-06T22:25:13+08:00</updated>
  <id>http://start530.github.io/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十五】《我叫MT offline》Demo]]></title>
    <link href="http://start530.github.io/blog/2014/02/25/play-cocos2dx-35/"/>
    <updated>2014-02-25T19:43:00+08:00</updated>
    <id>http://start530.github.io/blog/2014/02/25/play-cocos2dx-35</id>
    <content type="html"><![CDATA[<h3>1.写在前面</h3>

<p><strong>这是怎样一个游戏？</strong></p>

<p>这是一个最好的时代。软件跑在硬件之前，而创意跑在软件之前。除去那些跨时代的作品（现在还没出，比如体感，识别等等和硬件强相关的游戏），现在的手游对技术的要求门槛已经大大降低了。这是个创意决定市场的时代。</p>

<p>（1）比如早些时候的愤怒小鸟，植物僵尸，水果忍者，这些是智能机刚刚诞生的时候出来的，可以说是借iphone引领的触屏之风顺势而行火了一把，这种机会可遇不可求。</p>

<p>（2）再如飞机大战，FlappyBird，这些是利用怀旧风，无差别竞技以及用户口碑营销堆起来的游戏，这靠的要么后台硬有干爹，要么祖坟正运气好，如果都没有，想火也很难。</p>

<p>（3）又如卡牌，COC，横版格斗，这些靠的是真正的创意。由此引来的一堆跟风之作就能看出来，几千万的月流水也证明了这一点，第一个想到创意，第一个抢到市场就是赢家。但是再来山寨就没意思了。</p>

<p><em>MT就是这样一款一出现就让人眼前一亮的游戏，我期待手游市场天天都能出现不一样的作品，能抓住用户的游戏，而不是反复的换皮圈钱关服走人。</em></p>

<!-- more -->


<p><strong>我为什么要写这么一个demo？</strong></p>

<p>对于一个游戏狂热份子，当《我叫MT》出来的时候，新奇的玩法，酷炫的卡牌，流畅的动画，以及WOW情结，让我找不到理由拒绝它（虽然到现在蛋疼的用户体验和反人类设计还有不少）。每个游戏都有自己的生命周期，这些是跑不掉的，或许卓越的钱还没有赚够，但我希望这款游戏最后能有一个体面的结局。</p>

<p>从MT ios一区开始，玩到现在也近一年半了。它陪伴我历经了很多事情，如人饮水冷暖自知。每个程序员都有一颗做游戏的心。在决定进入游戏行业后，我决定写个MT的demo出来，算是感谢也算是怀念。说来也巧，当初找来各种版本的《我叫MT》反编译拿游戏资源为的只是为了收集所有的卡牌图片，结果后面发现2.3以后的版本都做了资源加密处理。所以手上只有2.3版的资源，这个demo就按着2.3版做。</p>

<p><strong>《我叫MT offline》这个游戏能做什么？</strong></p>

<p>其实它什么也做不了，只是游戏的整体框架以及所有动画的demo，由于写的比较赶，很多功能都没有来得及实现，代码也写的比较粗糙。接下来我会继续完善它，我的最终目的是把它改成单机版的《我叫MT offline》。它的工作量太大了，而且体力活占大部分，所以代码模块化复用和游戏内存优化显得很重要。如果不用赔60亿我会考虑把源码推上<a href="https://github.com/fusijie">Github</a>。</p>

<p>游戏采用VS2012+cocos2d-x v2.2.0开发。</p>

<h3>2.游戏结构和效果</h3>

<p><strong>公告</strong></p>

<div align="center"><img src="http://start530.github.io/images/Blog/mt/announcement.png" alt="" border="0" title="4" /><br></br></div>


<p><strong>游戏</strong></p>

<center><embed src="http://player.youku.com/player.php/sid/XNjc3ODI3NjY0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></center>


<p>录了个视频，我会尽快放出apk。</p>

<p><strong>开幕故事</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/story.gif">http://www.fusijie.com/images/Blog/mt/story.gif</a></p>

<p><strong>游戏主场景</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/mainui.gif">http://www.fusijie.com/images/Blog/mt/mainui.gif</a></p>

<p><strong>英雄</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/card.gif">http://www.fusijie.com/images/Blog/mt/card.gif</a></p>

<p><strong>进化</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/evolve.gif">http://www.fusijie.com/images/Blog/mt/evolve.gif</a></p>

<p><strong>碎片</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/chip.gif">http://www.fusijie.com/images/Blog/mt/chip.gif</a></p>

<p><strong>升级</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/levelup.gif">http://www.fusijie.com/images/Blog/mt/levelup.gif</a></p>

<p><strong>奖励</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/task.gif">http://www.fusijie.com/images/Blog/mt/task.gif</a></p>

<p><strong>技能学院</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/colleage.gif">http://www.fusijie.com/images/Blog/mt/colleage.gif</a></p>

<p><strong>副本列表</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/instance.gif">http://www.fusijie.com/images/Blog/mt/instance.gif</a></p>

<p><strong>副本战斗</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/battle.gif">http://www.fusijie.com/images/Blog/mt/battle.gif</a></p>

<p><strong>竞技场</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/arena.gif">http://www.fusijie.com/images/Blog/mt/arena.gif</a></p>

<p><strong>商店</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/store.gif">http://www.fusijie.com/images/Blog/mt/store.gif</a></p>

<p><strong>单次抽奖</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleone.gif">http://www.fusijie.com/images/Blog/mt/raffleone.gif</a></p>

<p><strong>十连抽</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleten.gif">http://www.fusijie.com/images/Blog/mt/raffleten.gif</a></p>

<p><strong>好友</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/friend.gif">http://www.fusijie.com/images/Blog/mt/friend.gif</a></p>

<p><strong>攻略</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/more.gif">http://www.fusijie.com/images/Blog/mt/more.gif</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2014/02/25/play-cocos2dx-35/'><a href="http://start530.github.io/blog/2014/02/25/play-cocos2dx-35/">http://start530.github.io/blog/2014/02/25/play-cocos2dx-35/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十四】绘图：CCDrawingPrimitives和CCDrawNode]]></title>
    <link href="http://start530.github.io/blog/2014/02/08/play-cocos2dx-34/"/>
    <updated>2014-02-08T16:10:00+08:00</updated>
    <id>http://start530.github.io/blog/2014/02/08/play-cocos2dx-34</id>
    <content type="html"><![CDATA[<p>最近忙出翔了，这年过的也揪心。好久没来更新博客了，今天就来写一写cocos2d-x中图形的绘制。</p>

<h3>1.概述</h3>

<p>其实cocos2d-x封装了大量的opengl的绘图函数，我们可以很轻松的在游戏中调用。但是实际上我们很少会这么做，因为编码绘图的方式效率实在太低了，尤其是诸如一些高阶贝塞尔曲线之类的，官方也不建议这么做，使用图像能更有效的提高绘图效率，同时也会更为的美观，也减少了一些精灵遮挡问题和边缘锯齿问题。cocos2d-x中绘图主要有两种方式：CCDrawingPrimitives和CCDrawNode。它们都在cocos2dx\draw_nodes目录下。</p>

<!-- more -->


<h3>2.CCDrawingPrimitives（原生绘图）</h3>

<p><strong>2.1.特点</strong></p>

<p>CCDrawingPrimitives必须在节点的draw函数中调用，draw函数每帧被调用一次，主要做一些绘制的工作。但这并不意味着它就是静态不可改变的，我们完全可以通过修改描绘内容的方式来动态绘图。比如可以直接在用触摸的方式在屏幕上绘图。</p>

<p>另外，使用CCDrawingPrimitives绘图默认的Z-Order是0，所以可能会被其他节点覆盖，因为它无法设置Z-Order，所以只能通过设置其他节点的Z-Order为负值使得绘图在最前端得以看见。</p>

<p><strong>2.2.API</strong></p>

<figure class='code'><figcaption><span>CCDrawingPrimitives API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//绘制一个给定x，y值的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoint</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">point</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一组点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoints</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">points</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numberOfPoints</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一条给定起始点和目标点的直线  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawLine</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定起始点和目标点的矩形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawRect</span><span class="p">(</span> <span class="n">CCPoint</span> <span class="n">origin</span><span class="p">,</span> <span class="n">CCPoint</span> <span class="n">destination</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定起始点和目标点和颜色的矩形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawSolidRect</span><span class="p">(</span> <span class="n">CCPoint</span> <span class="n">origin</span><span class="p">,</span> <span class="n">CCPoint</span> <span class="n">destination</span><span class="p">,</span> <span class="n">ccColor4F</span> <span class="n">color</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定一组点的多边形，可以是闭合或开放  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoly</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">vertices</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numOfVertices</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">closePolygon</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定一组点和颜色的多边形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawSolidPoly</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">poli</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numberOfPoints</span><span class="p">,</span> <span class="n">ccColor4F</span> <span class="n">color</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定中心，半径，分段数的圆  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCircle</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">center</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">angle</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">drawLineToCenter</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scaleX</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scaleY</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCircle</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">center</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">angle</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">drawLineToCenter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个带一个控制点的贝塞尔曲线（二次）  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawQuadBezier</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个带两个控制点的贝塞尔曲线（高阶）  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCubicBezier</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control1</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control2</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制默认曲率的基数样条  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCatmullRom</span><span class="p">(</span> <span class="n">CCPointArray</span> <span class="o">*</span><span class="n">arrayOfControlPoints</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制指定曲率的基数样条  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCardinalSpline</span><span class="p">(</span> <span class="n">CCPointArray</span> <span class="o">*</span><span class="n">config</span><span class="p">,</span> <span class="kt">float</span> <span class="n">tension</span><span class="p">,</span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置绘制颜色，4个byte型  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawColor4B</span><span class="p">(</span> <span class="n">GLubyte</span> <span class="n">r</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">g</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">b</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置绘制颜色，4个float型  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawColor4F</span><span class="p">(</span> <span class="n">GLfloat</span> <span class="n">r</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">g</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">b</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置点大小，默认为1  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccPointSize</span><span class="p">(</span> <span class="n">GLfloat</span> <span class="n">pointSize</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.3.示例</strong></p>

<p>代码使用的是TestCpp中代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170619906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>3.CCDrawNode（绘图节点）</h3>

<p><strong>3.1.特点</strong></p>

<p>CCDrawNode从CCNode继承而来，是一个图形绘制的节点类，它提供了几个常用的点线面函数方便绘图，其实在之前的游戏遮罩一文中就有写过。相较于CCDrawingPrimitives，这里更推荐使用CCDrawNode。</p>

<p><em>（1）它将绘图封装为普通节点的方式进行处理，符合cocos2d-x树状编程的思想，同时也避免了一些遮盖的问题。</em></p>

<p><em>（2）不需要在draw函数中调用。</em></p>

<p><em>（3）使用批处理绘图，提高了绘图效率。</em></p>

<p><strong>3.2.API</strong></p>

<figure class='code'><figcaption><span>CCDrawNode API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//绘制一个指定位置，大小，颜色的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawDot</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">pos</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个指定起点终点，大小，颜色的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawSegment</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">from</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">to</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个指定点，填充颜色，边框颜色的，边框宽度的多边形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawPolygon</span><span class="p">(</span><span class="n">CCPoint</span> <span class="o">*</span><span class="n">verts</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">fillColor</span><span class="p">,</span> <span class="kt">float</span> <span class="n">borderWidth</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">borderColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.3.示例</strong></p>

<p>代码也是TestCpp中的代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170658078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>4.源码下载</h3>

<p>可以自己看TestCpp示例，也可以从<a href="http://download.csdn.net/detail/jackyvincefu/6903357">这里</a>下载。<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2014/02/08/play-cocos2dx-34/'><a href="http://start530.github.io/blog/2014/02/08/play-cocos2dx-34/">http://start530.github.io/blog/2014/02/08/play-cocos2dx-34/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十三】游戏嵌入Webview网页]]></title>
    <link href="http://start530.github.io/blog/2013/12/26/play-cocos2dx-33/"/>
    <updated>2013-12-26T14:11:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/26/play-cocos2dx-33</id>
    <content type="html"><![CDATA[<p>手游《我叫MT》一开始会弹出一个游戏公告，有玩过的肯定都蛮熟悉的，这就是webview，就是一个网页。由于webview和平台相关，这里就介绍下cocos2d-x如何嵌入andorid的webview控件，在cocos2d-x中显示网页。</p>

<h3>1.Jni</h3>

<p>Jni这里我就不再多说了。可用参考<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">wikipedia</a>，或者<a href="http://blog.csdn.net/jackystudio/article/details/12150907">微信飞机大战的移植篇</a>。通过Jni，可以实现在cocos2d-x中调用Android的API，当然也可以进行传值。</p>

<h3>2.Android使用webview</h3>

<p>直接上代码。主要是处理布局和webview使用的问题。这里采用代码布局。以下操作在android的主类（cocos2dxActivity）中处理。</p>

<!-- more -->


<p><strong>2.1.添加成员变量</strong></p>

<p>整个布局的结构是最底层一个FrameLayout，ImageView控件放置在FrameLayout上。然后之上是一个LinearLayout用来放置关闭按钮，LinearLayout往下是Webview控件。</p>

<figure class='code'><figcaption><span>成员变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">static</span> <span class="n">Test</span> <span class="n">test</span>  <span class="o">=</span> <span class="kc">null</span><span class="o">;</span><span class="c1">//Test实例  </span>
</span><span class='line'>    <span class="n">WebView</span> <span class="n">m_webView</span><span class="o">;</span><span class="c1">//WebView控件  </span>
</span><span class='line'>    <span class="n">ImageView</span> <span class="n">m_imageView</span><span class="o">;</span><span class="c1">//ImageView控件  </span>
</span><span class='line'>    <span class="n">FrameLayout</span> <span class="n">m_webLayout</span><span class="o">;</span><span class="c1">//FrameLayout布局  </span>
</span><span class='line'>    <span class="n">LinearLayout</span> <span class="n">m_topLayout</span><span class="o">;</span><span class="c1">//LinearLayout布局  </span>
</span><span class='line'>    <span class="n">Button</span> <span class="n">m_backButton</span><span class="o">;</span><span class="c1">//关闭按钮  </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.OnCreate中添加FrameLayout布局</strong></p>

<figure class='code'><figcaption><span>添加FrameLayout布局</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">){</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>          <span class="n">test</span><span class="o">=</span><span class="k">this</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//初始化一个空布局  </span>
</span><span class='line'>          <span class="n">m_webLayout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="n">FrameLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">lytp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="mi">800</span><span class="o">,</span><span class="mi">640</span><span class="o">);</span>
</span><span class='line'>          <span class="n">lytp</span> <span class="o">.</span><span class="na">gravity</span> <span class="o">=</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">CENTER</span><span class="o">;</span>
</span><span class='line'>          <span class="n">addContentView</span><span class="o">(</span><span class="n">m_webLayout</span><span class="o">,</span> <span class="n">lytp</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.3.返回实例</strong></p>

<figure class='code'><figcaption><span>返回实例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="n">Test</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;TestJacky&quot;</span><span class="o">,</span><span class="s">&quot;getInstance&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.4.显示webview</strong></p>

<figure class='code'><figcaption><span>显示webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">openWebview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;TestJacky&quot;</span><span class="o">,</span> <span class="s">&quot;openWebView&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span><span class="c1">//在主线程里添加别的控件  </span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//初始化webView  </span>
</span><span class='line'>              <span class="n">m_webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//设置webView能够执行javascript脚本  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setJavaScriptEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//设置可以支持缩放  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setSupportZoom</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span><span class="c1">//设置出现缩放工具  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setBuiltInZoomControls</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//载入URL  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;http://m.blog.csdn.net/blog/jackyvincefu/&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//使页面获得焦点  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">();</span>
</span><span class='line'>              <span class="c1">//如果页面中链接，如果希望点击链接继续在当前browser中响应  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">setWebViewClient</span><span class="o">(</span><span class="k">new</span> <span class="n">WebViewClient</span><span class="o">(){</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldOverrideUrlLoading</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">if</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;tel:&quot;</span><span class="o">)&lt;</span><span class="mi">0</span><span class="o">){</span>
</span><span class='line'>                          <span class="n">view</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//背景图  </span>
</span><span class='line'>            <span class="n">m_imageView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_imageView</span><span class="o">.</span><span class="na">setImageResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">bkgnd</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_imageView</span><span class="o">.</span><span class="na">setScaleType</span><span class="o">(</span><span class="n">ImageView</span><span class="o">.</span><span class="na">ScaleType</span><span class="o">.</span><span class="na">FIT_XY</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//初始化线性布局 里面加按钮和webView  </span>
</span><span class='line'>            <span class="n">m_topLayout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayout</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//初始化返回按钮  </span>
</span><span class='line'>            <span class="n">m_backButton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setBackgroundResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>            <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">lypt</span><span class="o">=</span><span class="k">new</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class='line'>            <span class="n">lypt</span><span class="o">.</span><span class="na">gravity</span><span class="o">=</span><span class="n">Gravity</span><span class="o">.</span><span class="na">RIGHT</span><span class="o">;</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setLayoutParams</span><span class="o">(</span><span class="n">lypt</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">removeWebView</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>            <span class="c1">//把image加到主布局里  </span>
</span><span class='line'>            <span class="n">m_webLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_imageView</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//把webView加入到线性布局  </span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_backButton</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_webView</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//再把线性布局加入到主布局  </span>
</span><span class='line'>            <span class="n">m_webLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_topLayout</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.5.移除webview</strong></p>

<figure class='code'><figcaption><span>移除webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeWebView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">m_webLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_imageView</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_imageView</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_webLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_topLayout</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_webView</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_webView</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_backButton</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_backButton</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.6.重写返回键</strong></p>

<figure class='code'><figcaption><span>重写返回键</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCoder</span><span class="o">,</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">//如果网页能回退则后退，如果不能后退移除WebView  </span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">m_webView</span><span class="o">.</span><span class="na">canGoBack</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">keyCoder</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_BACK</span><span class="o">){</span>
</span><span class='line'>          <span class="n">m_webView</span><span class="o">.</span><span class="na">goBack</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="n">removeWebView</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.cocos2d-x使用Jni</h3>

<p>这里直接使用HelloWorld的示例，修改了close按钮的回调函数。</p>

<p><strong>3.1.jni头文件</strong></p>

<figure class='code'><figcaption><span>jni头文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;platform/android/jni/JniHelper.h&quot;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.Jni调用打开webview</strong></p>

<figure class='code'><figcaption><span>Jni调用打开webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>  <span class="n">JniMethodInfo</span> <span class="n">minfo</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//getStaticMethodInfo，判断Java静态函数是否存在，并且把信息保存到minfo里  </span>
</span><span class='line'>  <span class="c1">//参数1：JniMethodInfo  </span>
</span><span class='line'>  <span class="c1">//参数2：Java类包名+类名  </span>
</span><span class='line'>  <span class="c1">//参数3：Java函数名称  </span>
</span><span class='line'>  <span class="c1">//参数4：函数参数类型和返回值类型  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;com/jacky/test/Test&quot;</span><span class="p">,</span><span class="s">&quot;getInstance&quot;</span><span class="p">,</span><span class="s">&quot;()Lcom/jacky/test/Test;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">jobject</span> <span class="n">jobj</span><span class="p">;</span><span class="c1">//存对象  </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//这里的调用getInstance，返回Test类的对象。  </span>
</span><span class='line'>      <span class="n">jobj</span> <span class="o">=</span> <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticObjectMethod</span><span class="p">(</span><span class="n">minfo</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;com/jacky/test/Test&quot;</span><span class="p">,</span><span class="s">&quot;openWebview&quot;</span><span class="p">,</span><span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//调用openWebview, 参数1：Test对象   参数2：方法ID  </span>
</span><span class='line'>          <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">jobj</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="k">else</span>
</span><span class='line'>      <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_IOS</span><span class="p">)</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.效果图</h3>

<p>爪机截屏的。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131226095754125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095821781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095849921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p><em>ps：这里没有处理多次打开webview的情况。可以采用Jni方法来通知cocos2d-x，也可以直接在主类中设置一个成员变量标志位，调用openWebview时设置为true，removeWebView时设置为false，在调用openWebview时检测这个标志位来决定是否打开即可。</em></p>

<h3>5.源码下载</h3>

<p>包含win32，android代码，拿掉了android交叉编译生成的obj，保留so和apk文件。</p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6770315">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/26/play-cocos2dx-33/'>http://start530.github.io/blog/2013/12/26/play-cocos2dx-33/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十二】xml的解析]]></title>
    <link href="http://start530.github.io/blog/2013/12/18/play-cocos2dx-32/"/>
    <updated>2013-12-18T09:30:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/18/play-cocos2dx-32</id>
    <content type="html"><![CDATA[<p>cocos2d-x中对xml的解析是采用的TinyXML库，而对plist的解析同时结合了CCDictionary来处理，这里简单介绍下cocos2d-x中解析xml的两种方式，也是常用的xml两个C++解析库：TinyXML和RapidXML。xml被设计用于数据存储和传输，重点是数据内容本身，而不像html，用于表现数据。</p>

<h3>1.TinyXML</h3>

<p><strong>1.1.概况</strong></p>

<p>TinyXML的<a href="http://www.grinninglizard.com/tinyxml/">主页</a>，本来不打算介绍这个库的，因为它的解析效率并不高，但是鉴于cocos2d-x采用的就是它，所以也稍微写一下它的用法，cocos2d-x使用的是TinyXML2，Github地址<a href="https://github.com/leethomason/tinyxml2">在这里</a>。就是对TinyXML重新进行了封装，具体的区别在其github上也写的很清楚了。</p>

<!-- more -->


<p><strong>1.2.示例</strong></p>

<p>这里不介绍API，因为太多了，在线手册也都有。首先下载TinyXML库，将4个cpp文件和2个h文件加入cocos2d-x中。添加头文件时只需添加&#8221;<em>tinyxml.h</em>&ldquo;即可。</p>

<p><strong>1.2.1.xml的创建</strong></p>

<figure class='code'><figcaption><span>xml的创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">writeTinyXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TiXmlDocument</span><span class="o">*</span> <span class="n">myTinyXMLDoc</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlDocument</span><span class="p">();</span><span class="c1">//创建文档对象  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">rootElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;Jacky&quot;</span><span class="p">);</span><span class="c1">//创建根节点并连接到文档  </span>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">rootElement</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">infoElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;Info&quot;</span><span class="p">);</span><span class="c1">//创建info节点并连接到根节点  </span>
</span><span class='line'>      <span class="n">rootElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">infoElement</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">);</span><span class="c1">//为info节点设置属性  </span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;QQ&quot;</span><span class="p">,</span><span class="s">&quot;754505629&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;E-mail&quot;</span><span class="p">,</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">blogElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;blog&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">blogElement</span><span class="p">);</span><span class="c1">//创建blog节点并连接到info节点  </span>
</span><span class='line'>      <span class="n">TiXmlText</span><span class="o">*</span> <span class="n">blogtext</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;http://blog.csdn.net/jackystudio&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">blogtext</span><span class="p">);</span><span class="c1">//为blog节点添加文本值  </span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">websiteElenment</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;website&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">websiteElenment</span><span class="p">);</span>
</span><span class='line'>      <span class="n">TiXmlText</span><span class="o">*</span> <span class="n">websitetext</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;http://www.fusijie.com&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">websiteElenment</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">websitetext</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">SaveFile</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testTiny.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//保存xml  </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">delete</span> <span class="n">myTinyXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很奇怪为什么new了那么多内存，但最后只delete TixmlDocument呢？其实在TinyXML中，子节点的内存管理都由父节点进行维护，所以不必在释放内存时对每个子节点都进行释放，而只需要释放父节点即可。</p>

<p><strong>1.2.2.xml的读取</strong></p>

<figure class='code'><figcaption><span>xml的读取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">readTinyXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TiXmlDocument</span><span class="o">*</span> <span class="n">myTinyXMLDoc</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlDocument</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testTiny.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">LoadFile</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">rootElement</span> <span class="o">=</span> <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">RootElement</span><span class="p">();</span>  <span class="c1">//获取根节点  </span>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">infoElement</span> <span class="o">=</span> <span class="n">rootElement</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span>  <span class="c1">// 获取Info节点    </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">infoElement</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlAttribute</span><span class="o">*</span> <span class="n">attributeOfinfo</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">FirstAttribute</span><span class="p">();</span>  <span class="c1">//获得info的属性    </span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span> <span class="n">attributeOfinfo</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;%s : %s&quot;</span><span class="p">,</span><span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span><span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">());</span><span class="c1">//获取所有属性  </span>
</span><span class='line'>              <span class="n">attributeOfinfo</span> <span class="o">=</span> <span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">blogElement</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span><span class="c1">//获得blog  </span>
</span><span class='line'>          <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;blog : %s&quot;</span><span class="p">,</span><span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">websiteElement</span> <span class="o">=</span> <span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span><span class="c1">//获取website    </span>
</span><span class='line'>          <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;website : %s&quot;</span><span class="p">,</span><span class="n">websiteElement</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">infoElement</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span><span class="c1">//查找下一节点    </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">myTinyXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>2.RapidXML</h3>

<p><strong>2.1.概况</strong></p>

<p>RapidXML的<a href="http://rapidxml.sourceforge.net/">主页</a>。在其手册中第四节<a href="http://rapidxml.sourceforge.net/manual.html#namespacerapidxml_1performance">comparison with others parsers</a>可以看到在同等条件下它的解析效率是TinyXML的30到60倍，所以如果需要解析大文件的话，RapidXML是不二之选。</p>

<p><strong>2.2.示例</strong></p>

<p>首先下载RapidXML库，将四个hpp文件都加入cocos2d-x中，在包含头文件时，4个hpp都要进行包含。</p>

<p><strong>2.2.1.xml的创建</strong></p>

<figure class='code'><figcaption><span>xml的创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">writeRapidXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建根节点  </span>
</span><span class='line'>      <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">append_node</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="c1">//追加根节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;Info&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建info节点  </span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;QQ&quot;</span><span class="p">,</span><span class="s">&quot;754505629&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;E-mail&quot;</span><span class="p">,</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">root</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">info</span><span class="p">);</span><span class="c1">//追加info节点到root  </span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//创建blog和website节点并追加到root  </span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">blog</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;blog&quot;</span><span class="p">,</span><span class="s">&quot;http://blog.csdn.net/jackystudio&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">blog</span><span class="p">);</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">website</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;website&quot;</span><span class="p">,</span><span class="s">&quot;http://www.fusijie.com&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">website</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//保存xml文档  </span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">text</span><span class="p">),</span> <span class="n">myRapidXMLDoc</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">out</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testRapid.xml&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.2.2.xml的读取</strong></p>

<figure class='code'><figcaption><span>xml的读取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">readRapidXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">file</span><span class="o">&lt;&gt;</span> <span class="n">fdoc</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testRapid.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//读取数据  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">fdoc</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">parse</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fdoc</span><span class="p">.</span><span class="n">data</span><span class="p">());</span><span class="c1">//将数据写入xml_document  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取根节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取Info节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_attribute</span><span class="o">&lt;&gt;*</span> <span class="n">info_attr</span> <span class="o">=</span> <span class="n">info</span><span class="o">-&gt;</span><span class="n">first_attribute</span><span class="p">();</span><span class="c1">//获取info属性  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">blog</span><span class="o">=</span><span class="n">info</span><span class="o">-&gt;</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取blog节点  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">website</span><span class="o">=</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">next_sibling</span><span class="p">();</span><span class="c1">//获取website节点  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">website</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">website</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.生成xml的文件</h3>

<p>以上2种方式生成的xml文件内容如下：</p>

<figure class='code'><figcaption><span>生成的xml文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Jacky&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Info</span> <span class="na">Name=</span><span class="s">&quot;Jacky&quot;</span> <span class="na">QQ=</span><span class="s">&quot;754505629&quot;</span> <span class="na">E-mail=</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;blog&gt;</span>http://blog.csdn.net/jackystudio<span class="nt">&lt;/blog&gt;</span>
</span><span class='line'>        <span class="nt">&lt;website&gt;</span>http://www.fusijie.com<span class="nt">&lt;/website&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Info&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Jacky&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6732361">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/18/play-cocos2dx-32/'>http://start530.github.io/blog/2013/12/18/play-cocos2dx-32/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十一】服务器的网络通信编程]]></title>
    <link href="http://start530.github.io/blog/2013/12/17/play-cocos2dx-31/"/>
    <updated>2013-12-17T14:11:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/17/play-cocos2dx-31</id>
    <content type="html"><![CDATA[<p>这里采用Apache+php搭建了一个简易服务器，服务端用php语言，客户端采用cocos2d-x的CCHttpClient类通过http方式访问服务端资源。模拟了cocos2d-x提交账户和密码到服务端，服务端校验帐号密码，如果正确返回客户端成功登录，如果错误则返回错误信息，同时在服务端后台保存登录log。第一次接触php，语法上和C/C++还是蛮像的，主要是给出一个cocos2d-x网络实例，代码中并没有做一些防呆纠错措施。</p>

<h3>1.搭建Apache+php网页服务器</h3>

<p>Apche2.2 x86版:<a href="http://pan.baidu.com/s/1vNuLF">下载地址</a></p>

<p>php5.2.17版:<a href="http://pan.baidu.com/s/17sFoN">下载地址</a></p>

<p>搭建过程参见<a href="http://tech.163.com/06/0206/11/299AMBLT0009159K.html">这里</a>，这里就不安装MySQL了。</p>

<!-- more -->


<p>搭建成功后，打开<a href="http://127.0.0.1">http://127.0.0.1</a>，就可以看到&#8221;<em>It&#8217; works!</em>&ldquo;字样。同时打开Apache monitor监控Apache处于运行状态。我这里使用的80端口。</p>

<h3>2.php收集表单的方式</h3>

<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE，对应着查改增删，这里介绍GET和POST。</p>

<p>用$_GET获取表单数据，表单数据对任何人都是可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php?username=jackystudio&amp;password=123
</code></pre>

<p>用$_POST获取表单数据，表单数据则是不可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php
</code></pre>

<p>详细可见<a href="http://www.w3school.com.cn/php">w3school有关php章节</a>。</p>

<h3>3.服务器php处理代码</h3>

<p>这里我直接修改了主页index.html。会C++应该都能看懂，先是打开一个log.txt，接收到username和password，如果是username是jackystudio，password是123的话，把username和password写入log.txt，并返回登录成功，如果username或password错误时返回登录失败。如果未接收到则返回没有用户名密码。</p>

<p><strong>3.1.采用get方式代码</strong></p>

<figure class='code'><figcaption><span>Get方式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;html&gt;</span>
</span><span class='line'>      <span class="nt">&lt;body&gt;</span>
</span><span class='line'>          <span class="cp">&lt;?php  </span>
</span><span class='line'><span class="cp">         $open=fopen(&quot;log.txt&quot;,&quot;a&quot; ); //Save password  </span>
</span><span class='line'><span class="cp">         if(isset($_GET[&quot;username&quot;]) &amp;&amp; isset($_GET[&quot;password&quot;]))  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             if($_GET[&quot;username&quot;]==&quot;jackystudio&quot; &amp;&amp; $_GET[&quot;password&quot;]==&quot;123&quot;)  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Username:&quot;.$_GET[&quot;username&quot;]);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;\r\n&quot;);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Password:&quot;.$_GET[&quot;password&quot;]);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Success&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">             else  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Wrong Username or password!&quot;);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Failed&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         else  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             fwrite($open,&quot;No password&quot;);  </span>
</span><span class='line'><span class="cp">             echo &quot;No Username or Password&quot;; //return to client  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         fclose($open);  </span>
</span><span class='line'><span class="cp">         ?&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.采用post方式代码</strong></p>

<figure class='code'><figcaption><span>Post方式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;html&gt;</span>
</span><span class='line'>      <span class="nt">&lt;body&gt;</span>
</span><span class='line'>          <span class="cp">&lt;?php  </span>
</span><span class='line'><span class="cp">         $open=fopen(&quot;log.txt&quot;,&quot;a&quot; ); //Save password  </span>
</span><span class='line'><span class="cp">         if(isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;]))  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             if($_POST[&quot;username&quot;]==&quot;jackystudio&quot; &amp;&amp; $_POST[&quot;password&quot;]==&quot;123&quot;)  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Username:&quot;.$_POST[&quot;username&quot;]);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;\r\n&quot;);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Password:&quot;.$_POST[&quot;password&quot;]);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Success&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">             else  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Wrong Username or password!&quot;);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Failed&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         else  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             fwrite($open,&quot;No password&quot;);  </span>
</span><span class='line'><span class="cp">             echo &quot;No Username or Password&quot;; //return to client  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         fclose($open);  </span>
</span><span class='line'><span class="cp">         ?&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.cocos2d-x使用CCHttpClient类进行网络请求</h3>

<p>CCHttpClient的使用这里也不赘述了，请移步官方文档How_to_use_CCHttpClient。这里在上文编辑框和点九图的基础上进行了修改。2个编辑框，分别是username和password。一个按钮点击发送请求。一个文本显示从服务器返回的结果。</p>

<p><strong>4.1.按钮请求处理</strong></p>

<figure class='code'><figcaption><span>按钮请求处理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">btncallback</span><span class="p">(</span> <span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">requestType_is_get</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="c1">//采用get方式或者post方式  </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">requestType_is_get</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCHttpRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCHttpRequest</span><span class="p">();</span><span class="c1">//创建请求对象  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:80/index.html?&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">p_User_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span><span class="c1">//获取username编辑框内容  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str3</span> <span class="o">=</span> <span class="n">p_Psw_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span><span class="c1">//获取password编辑框内容  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">struser</span><span class="o">=</span><span class="s">&quot;username=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">strpsw</span><span class="o">=</span><span class="s">&quot;&amp;password=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str1</span><span class="o">=</span><span class="n">str1</span><span class="o">+</span><span class="n">struser</span><span class="o">+</span><span class="n">str2</span><span class="o">+</span><span class="n">strpsw</span><span class="o">+</span><span class="n">str3</span><span class="p">;</span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="n">str1</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//设置请求的url，username和password已经包含在url中  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">CCHttpRequest</span><span class="o">::</span><span class="n">kHttpGet</span><span class="p">);</span><span class="c1">//设置为Get模式  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setResponseCallback</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">httpresponse_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">));</span><span class="c1">//设置响应的回调  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="s">&quot;GET test&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">CCHttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span><span class="c1">//发送请求  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span><span class="c1">//释放请求  </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCHttpRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCHttpRequest</span><span class="p">();</span><span class="c1">//创建请求对象  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:80/index.html&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">p_User_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str3</span> <span class="o">=</span> <span class="n">p_Psw_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">struser</span><span class="o">=</span><span class="s">&quot;username=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">strpsw</span><span class="o">=</span><span class="s">&quot;&amp;password=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str2</span><span class="o">=</span><span class="n">struser</span><span class="o">+</span><span class="n">str2</span><span class="o">+</span><span class="n">strpsw</span><span class="o">+</span><span class="n">str3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="n">str1</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//设置请求的url，只是请求页面的url，并不包含username和password  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">CCHttpRequest</span><span class="o">::</span><span class="n">kHttpPost</span><span class="p">);</span><span class="c1">//设置为Post模式  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setResponseCallback</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">httpresponse_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">));</span><span class="c1">//设置响应的回调  </span>
</span><span class='line'>
</span><span class='line'>          <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">postData</span> <span class="o">=</span> <span class="n">str2</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestData</span><span class="p">(</span><span class="n">postData</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">postData</span><span class="p">));</span><span class="c1">//设置请求数据，也就是username和password  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="s">&quot;POST test&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">CCHttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span><span class="c1">//发送请求  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span><span class="c1">//释放请求  </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4.2.响应回调处理</strong></p>

<figure class='code'><figcaption><span>响应回调处理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">(</span> <span class="n">CCHttpClient</span><span class="o">*</span> <span class="n">client</span><span class="p">,</span> <span class="n">CCHttpResponse</span><span class="o">*</span> <span class="n">response</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">isSucceed</span><span class="p">())</span><span class="c1">//如果响应失败，输出错误信息  </span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCString</span> <span class="n">strError</span><span class="p">;</span>
</span><span class='line'>          <span class="n">strError</span><span class="p">.</span><span class="n">initWithFormat</span><span class="p">(</span><span class="s">&quot;Receive Error! </span><span class="se">\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">getErrorBuffer</span><span class="p">());</span>
</span><span class='line'>          <span class="n">m_labelStatusCode</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">strError</span><span class="p">.</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">getResponseData</span><span class="p">();</span><span class="c1">//接收响应信息  </span>
</span><span class='line'>      <span class="n">string</span> <span class="n">recieveData</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">buffer</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">recieveData</span> <span class="o">+=</span> <span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">)[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">size_t</span> <span class="n">begin</span><span class="o">=</span> <span class="n">recieveData</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;&lt;body&gt;&quot;</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="p">;</span><span class="c1">//这里简单处理，获取&lt;body&gt;标签内数据，即是响应内容  </span>
</span><span class='line'>      <span class="n">size_t</span> <span class="n">end</span><span class="o">=</span> <span class="n">recieveData</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;&lt;/body&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">string</span> <span class="n">result</span><span class="p">(</span><span class="n">recieveData</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_labelStatusCode</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.效果图</h3>

<p><strong>5.1.Apache运行（Get和Post两种效果都是一样的）</strong></p>

<p><em>（1）帐号密码正确时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145727843" alt="" border="0" title="登录成功" /><br></br></div>


<p><em>（2）帐号密码错误时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145557531" alt="" border="0" title="登录失败" /><br></br></div>


<p><strong>5.2.关闭Apache</strong></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145740578" alt="" border="0" title="服务器关闭" /><br></br></div>


<h3>6.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6713471">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/17/play-cocos2dx-31/'><a href="http://start530.github.io/blog/2013/12/17/play-cocos2dx-31/">http://start530.github.io/blog/2013/12/17/play-cocos2dx-31/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十】点九图和输入框的使用]]></title>
    <link href="http://start530.github.io/blog/2013/12/13/play-cocos2dx-30/"/>
    <updated>2013-12-13T11:53:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/13/play-cocos2dx-30</id>
    <content type="html"><![CDATA[<p>登录界面一个帐号/密码输入框或者主角命名框是少不了的。这节就来了解一下点九图的输入框的使用。这里只是介绍基础知识，并不进行平台的移植，也不处理跨平台可能出现的问题。</p>

<h3>1.点九图CCScale9Sprite</h3>

<p><strong>1.1.概述</strong></p>

<p>点九图做过移动开发的肯定不会陌生。采用的是PNG点9图，PNG点9图可以自适应各种环境，同时保持伸缩不变形。移动端的UI基本上都是按这个来做的。点9图的制作很简单，用Android SDK的tool下的draw9patch.bat就可以制作。左为原理图，右为效果图。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131213100101843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="点九图" /><br></br></div>


<p><strong>1.2.使用</strong></p>

<p>cocos2d-x采用CCScale9Sprite来处理点九图，CCScale9Sprite为扩展类，所以在使用前需加入如下声明。</p>

<figure class='code'><figcaption><span>头文件和空间</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;cocos-ext.h&quot;</span>
</span><span class='line'>  <span class="n">USING_NS_CC_EXT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>CCScale9Sprite和CCSprite一样继承于CCNodeRGB，所以基本上可以像使用CCSprite一样使用CCScale9Sprite（有一点小差别CCSprite还继承了CCTextureProtocol接口）。以下用于创建一个二态点九图按钮。</p>

<figure class='code'><figcaption><span>创建点九图按钮</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCScale9Sprite</span><span class="o">*</span> <span class="n">confirmnormal</span><span class="o">=</span><span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;btn_style_alert_dialog_button_normal.9.png&quot;</span><span class="p">);</span><span class="c1">//normal态  </span>
</span><span class='line'>    <span class="n">confirmnormal</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">70</span><span class="p">));</span><span class="c1">//设置大小  </span>
</span><span class='line'>    <span class="n">CCScale9Sprite</span><span class="o">*</span> <span class="n">confirmpressd</span><span class="o">=</span><span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;btn_style_alert_dialog_button_pressed.9.png&quot;</span><span class="p">);</span><span class="c1">//pressd态  </span>
</span><span class='line'>    <span class="n">confirmpressd</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">70</span><span class="p">));</span><span class="c1">//设置大小  </span>
</span><span class='line'>    <span class="n">CCMenuItemSprite</span><span class="o">*</span> <span class="n">menuitem</span><span class="o">=</span><span class="n">CCMenuItemSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">confirmnormal</span><span class="p">,</span><span class="n">confirmpressd</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="n">menu_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">btncallback</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CCMenu</span><span class="o">*</span> <span class="n">menu</span><span class="o">=</span><span class="n">CCMenu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">menuitem</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建menu  </span>
</span><span class='line'>    <span class="n">menu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.输入框CCEditBox</h3>

<p><strong>2.1.概述</strong></p>

<p>CCEditBox也是cocos2d-x的扩展类，所以和上面一样要进行头文件包含和命名空间声明。另外由于要监控输入框的各种状态，所以还必须实现CCEditBoxDelegate类，该类声明了以下接口：</p>

<figure class='code'><figcaption><span>CCEditBoxDelegate接口</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//当键盘弹出编辑框获得焦点时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxEditingDidBegin</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当键盘消失编辑框失去焦点时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxEditingDidEnd</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当编辑框文本改变时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxTextChanged</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当返回键按下时或者点击了键盘以外的区域时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxReturn</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.使用</strong></p>

<p>在TestLayer.cpp的init()中创建编辑框。</p>

<figure class='code'><figcaption><span>编辑框的使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//bool TestLayer::init()  </span>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">visibleSize</span><span class="o">=</span><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pEditBox</span> <span class="o">=</span> <span class="n">CCEditBox</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span> <span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;login_edit_normal.9.png&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setFontColor</span><span class="p">(</span><span class="n">ccRED</span><span class="p">);</span><span class="c1">//设置字体颜色  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setPlaceHolder</span><span class="p">(</span><span class="s">&quot;please input:&quot;</span><span class="p">);</span><span class="c1">//设置预置文本  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setMaxLength</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="c1">//设置最大长度  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeAny: 开启任何文本的输入键盘,包括换行  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeEmailAddr:   开启 邮件地址 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeNumeric: 开启 数字符号 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModePhoneNumber: 开启 电话号码 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeUrl: 开启 URL 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeDecimal: 开启 数字 输入类型键盘，允许小数点  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeSingleLine:  开启任何文本的输入键盘,不包括换行  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setInputMode</span><span class="p">(</span><span class="n">kEditBoxInputModeAny</span><span class="p">);</span><span class="c1">//设置输入类型  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagPassword:密码形式输入  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagSensitive:   敏感数据输入、存储输入方案且预测自动完成  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsWord: 每个单词首字母大写,并且伴有提示  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsSentence: 第一句首字母大写,并且伴有提示  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsAllCharacters:所有字符自动大写  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setInputFlag</span><span class="p">(</span><span class="n">kEditBoxInputFlagPassword</span><span class="p">);</span><span class="c1">//设置输入标志位  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeDefault:  默认使用键盘return 类型  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeDone: 默认使用键盘return类型为“Done”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeSend: 默认使用键盘return类型为“Send”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeSearch:   默认使用键盘return类型为“Search”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeGo:   默认使用键盘return类型为“Go”字样  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setReturnType</span><span class="p">(</span><span class="n">kKeyboardReturnTypeDone</span><span class="p">);</span><span class="c1">//设置返回类型  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setDelegate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="c1">//当前类继承CCEditBoxDelegate类  </span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">pEditBox</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当前类继承于CCEditBoxDelegate，实现其所有接口如下：</p>

<figure class='code'><figcaption><span>CCEditBoxDelegate接口实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxEditingDidBegin</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;start edit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxEditingDidEnd</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;end edit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxReturn</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;editbox return&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxTextChanged</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;text changed&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.结合点九图按钮的使用，效果图如下：</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131213102619421" alt="" border="0" title="效果" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6707427">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/13/play-cocos2dx-30/'><a href="http://start530.github.io/blog/2013/12/13/play-cocos2dx-30/">http://start530.github.io/blog/2013/12/13/play-cocos2dx-30/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十九】利用CCClipingNode做游戏遮罩]]></title>
    <link href="http://start530.github.io/blog/2013/12/06/play-cocos2dx-29/"/>
    <updated>2013-12-06T10:41:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/06/play-cocos2dx-29</id>
    <content type="html"><![CDATA[<p>新手引导是游戏中必备的（除了奇葩的MT用一段动画开始），也是玩家对游戏的第一印象，重要性不言而喻。一般采用的遮罩的形式来突出引导重点，同时屏蔽其他功能。这里简单的介绍一下游戏遮罩的实现，并给出一个示例。</p>

<h3>1.CCClipingNode</h3>

<p>CCClipingNode是一个可裁剪节点，简单理解：</p>

<p><em>（1）首先它是一个节点，继承于CCNode，所以它可以像普通节点一样放入CCLayer，CCScene，CCNode中。</em></p>

<p><em>（2）作为节点，它就可以用作容器，承载其他节点和精灵。我把它叫底板。</em></p>

<p><em>（3）如果想要对一个节点进行裁剪，那需要给出裁剪的部分，这个裁剪区域，我把它叫模版。</em></p>

<!-- more -->


<p>所以CCClipingNode裁剪节点在组成上=底板+模版，而在显示上=底板-模版。不知道这样解释会不会好理解一点。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206093955500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCClipingNode" /><br></br></div>


<h3>2.API</h3>

<p>CCClipingNode的使用还是比较简单的，至于显示底板还是模版，alpha值的设定，这些也不好说清楚，自己多试几次就知道是什么意思该怎么用了。</p>

<figure class='code'><figcaption><span>CCClipingNode API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//不带模版地创建一个裁剪节点  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCClippingNode</span><span class="o">*</span> <span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//使用一个节点作为模版创建裁剪节点  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCClippingNode</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//不带模版地初始化一个裁剪节点  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//使用一个节点作为模版初始化裁剪节点  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置/获取模版，注意模版需要retain！  </span>
</span><span class='line'>    <span class="n">CCNode</span><span class="o">*</span> <span class="n">getStencil</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setStencil</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置alpha值（0~1），这个很重要，裁剪是按像素抠图的，所以只有大于这个alpha值的模版像素才会被画出来  </span>
</span><span class='line'>    <span class="c1">//默认是1，也就是完全裁剪。  </span>
</span><span class='line'>    <span class="n">GLfloat</span> <span class="n">getAlphaThreshold</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setAlphaThreshold</span><span class="p">(</span><span class="n">GLfloat</span> <span class="n">fAlphaThreshold</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//默认是false，用于设置显示底板还是模版  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isInverted</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setInverted</span><span class="p">(</span><span class="kt">bool</span> <span class="n">bInverted</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.示例</h3>

<p>在init中实现：</p>

<figure class='code'><figcaption><span>CCClipingNode的使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCSize</span> <span class="n">visibleSize</span><span class="o">=</span><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">background</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWorld.png&quot;</span><span class="p">);</span><span class="c1">//创建背景  </span>
</span><span class='line'>    <span class="n">background</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="n">kTagBackground</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">clip</span><span class="o">=</span><span class="n">CCClippingNode</span><span class="o">::</span><span class="n">create</span><span class="p">();</span><span class="c1">//创建裁剪节点，成员变量  </span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setInverted</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="c1">//设置底板可见  </span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setAlphaThreshold</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">);</span><span class="c1">//设置alpha为0  </span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span><span class="n">kTagClipNode</span><span class="p">);</span><span class="c1">//添加裁剪节点  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCLayerColor</span><span class="o">*</span> <span class="n">back</span><span class="o">=</span><span class="n">CCLayerColor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">ccc4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">back</span><span class="p">);</span><span class="c1">//为裁剪节点添加一个黑色带透明（看起了是灰色）的底板  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//模版如果要在其他地方使用要记得retain！  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//第一种：以下模型是drawnode遮罩  </span>
</span><span class='line'>    <span class="c1">//CCDrawNode* front=CCDrawNode::create();  </span>
</span><span class='line'>    <span class="c1">//ccColor4F yellow = {1, 1, 0, 1};  </span>
</span><span class='line'>    <span class="c1">//CCPoint rect[4]={ccp(-30,30),ccp(30,30),ccp(30,-30),ccp(-30,-30)};  </span>
</span><span class='line'>    <span class="c1">//front-&gt;drawPolygon(rect, 4, yellow, 0, yellow);  </span>
</span><span class='line'>    <span class="c1">//front-&gt;setPosition(ccp(visibleSize.width/2, visibleSize.height/2));  </span>
</span><span class='line'>    <span class="c1">//clip-&gt;setStencil(front);  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//第二种：以下模型是带图像遮罩  </span>
</span><span class='line'>    <span class="n">CCNode</span><span class="o">*</span> <span class="n">nodef</span><span class="o">=</span><span class="n">CCNode</span><span class="o">::</span><span class="n">create</span><span class="p">();</span><span class="c1">//创建模版  </span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span><span class="c1">//这里使用的是close的那个图标，所以注意观察效果图2  </span>
</span><span class='line'>    <span class="n">nodef</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span><span class="c1">//在模版上添加精灵  </span>
</span><span class='line'>    <span class="n">nodef</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setStencil</span><span class="p">(</span><span class="n">nodef</span><span class="p">);</span><span class="c1">//设置模版  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tip</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;tip.png&quot;</span><span class="p">);</span><span class="c1">//一些引导提示  </span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setScale</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setRotation</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">70</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">50</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tip</span><span class="p">,</span><span class="n">kTagTip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCScaleBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.25f</span><span class="p">,</span><span class="mf">0.95f</span><span class="p">),</span><span class="n">CCScaleTo</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.25f</span><span class="p">,</span><span class="mf">0.5</span><span class="p">),</span><span class="nb">NULL</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">setTouchEnabled</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="c1">//触摸有效，落点正确时移除裁剪节点和提示，相关处理请看源码  </span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.效果</h3>

<p>两种效果：</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206102326578" alt="" border="0" title="1" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131206102337937" alt="" border="0" title="2" /><br></br></div>


<h3>5.源码</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6667189">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/06/play-cocos2dx-29/'><a href="http://start530.github.io/blog/2013/12/06/play-cocos2dx-29/">http://start530.github.io/blog/2013/12/06/play-cocos2dx-29/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十八】cocos2d-x的消息和数据传递]]></title>
    <link href="http://start530.github.io/blog/2013/12/03/play-cocos2dx-28/"/>
    <updated>2013-12-03T09:57:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/03/play-cocos2dx-28</id>
    <content type="html"><![CDATA[<p>如何在层间或者场景间进行消息传递，大概是每个初学者都要面对的问题吧。这里介绍cocos2d-x的一种消息/数据传递方式，内置的观察者模式，也称消息通知中心，CCNotificationCenter。</p>

<h3>1.CCNotificationCenter</h3>

<p>CCNotificationCenter是cocos2d-x提供的一个消息中心，类似于观察者模式，是一个单例类，用于辅助控制消息传递。大概工作原理如下图。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131203084104765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCNotificationCenter" /><br></br></div>


<p>这里以A，B通讯为例，A，B可以是层间或者场景间。假如A要向B发送带数据的消息。那么</p>

<p><em>（1）B向小心中心注册一个bMsg的消息，告知消息中心，如果消息中心接收到bMsg，必须通知B，以便B采取相应的措施。</em></p>

<p><em>（2）A向消息中心发送bMsg消息。</em></p>

<p><em>（3）消息中心接收到bMsg，查询有谁在它这里注册了这个消息，发现是B，就通知B有人发送了bMsg。</em></p>

<p><em>（4）当然这个消息带有A要传递的数据，而B也不知道到底是谁给它发了bMsg这条消息，除非在传递的数据中指出。</em></p>

<h3>2.相关API</h3>

<figure class='code'><figcaption><span>CCNotificationCenter API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">//获得消息通知中心的一个单例对象  </span>
</span><span class='line'>  <span class="k">static</span> <span class="n">CCNotificationCenter</span> <span class="o">*</span><span class="n">sharedNotificationCenter</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//销毁通知中心的单例对象  </span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">purgeNotificationCenter</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//添加观察者  </span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">addObserver</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">SEL_CallFuncO</span> <span class="n">selector</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">CCObject</span> <span class="o">*</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//移除观察者  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObserver</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//移除所有观察者  </span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">removeAllObservers</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//发送消息  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">postNotification</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//发送带数据的消息  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">postNotification</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">CCObject</span> <span class="o">*</span><span class="n">object</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>观察者的意思即是等待获取消息的对象，比如上图的B。</p>

<h3>3.原理</h3>

<p>CCNotificationCenter的实现比较简单，它的内部维护了一个CCArray数组，数组的元素是CCNotificationObserver类型的对象，CCNotificationObserver封装了回调的执行者，回调函数，消息名称以及传递的数据。每次注册，也就是添加观察者，其实就是把这个CCNotificationObserver对象加入通知中心的CCArray数组，而每次的消息发送就是将消息传递给通知中心，由通知中心遍历这个数组，找到一致的消息，调用这些回调函数。其实这样看起来，就像是A在调用B的函数。具体的就自己看下源码吧。</p>

<h3>4.示例</h3>

<p>这里做了一个场景，包含了2个层，目的是层A向层B发送带数据的消息，层B收到后打印出这条数据。</p>

<figure class='code'><figcaption><span>CCNotificationCenter的示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">//ALayer  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">ALayer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bRet</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span><span class="n">CCLayer</span><span class="o">::</span><span class="n">init</span><span class="p">());</span>
</span><span class='line'>          <span class="n">CCSize</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>          <span class="n">CCMenuItemImage</span> <span class="o">*</span><span class="n">pCloseItem</span> <span class="o">=</span> <span class="n">CCMenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>              <span class="s">&quot;CloseNormal.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;CloseSelected.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="k">this</span><span class="p">,</span>
</span><span class='line'>              <span class="n">menu_selector</span><span class="p">(</span><span class="n">ALayer</span><span class="o">::</span><span class="n">PostMessage</span><span class="p">));</span><span class="c1">//按钮用于点击发送消息  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">pCloseItem</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">));</span>
</span><span class='line'>          <span class="n">pCloseItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>          <span class="n">CCMenu</span><span class="o">*</span> <span class="n">pMenu</span> <span class="o">=</span> <span class="n">CCMenu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">pCloseItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pMenu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPointZero</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">pMenu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">bRet</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ALayer</span><span class="o">::</span><span class="n">PostMessage</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCString</span><span class="o">*</span> <span class="n">str</span><span class="o">=</span><span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Hello BLayer!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">postNotification</span><span class="p">(</span><span class="s">&quot;BMessage&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span><span class="c1">//发送带str的消息BMessage  </span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//BLayer  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">BLayer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bRet</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span><span class="n">CCLayer</span><span class="o">::</span><span class="n">init</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addObserver</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">callfuncO_selector</span><span class="p">(</span><span class="n">BLayer</span><span class="o">::</span><span class="n">getMessage</span><span class="p">),</span><span class="s">&quot;BMessage&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//注册BMessage，如果接收到了，执行getMessage  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">bRet</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">BLayer</span><span class="o">::</span><span class="n">getMessage</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCString</span><span class="o">*</span> <span class="n">str</span><span class="o">=</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">CCString</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span><span class="c1">//打印出传递的数据  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">str</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BLayer</span><span class="o">::~</span><span class="n">BLayer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">purgeNotificationCenter</span><span class="p">();</span><span class="c1">//释放通知中心单例对象  </span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.注意</h3>

<p>使用CCNotificationCenter需要注意以下几点：</p>

<p><em>（1）一个对象可以注册多个消息，一个消息也可以由多个消息注册。</em></p>

<p><em>（2）传递参数，A可以向B传递参数，而B在注册的时候也可以带一个参数，如果这两个数据不是指向同一对象的话，消息不会传递。也就是说要么A传递NULL对象，要么B注册时带NULL对象，要么都不是NULL但必须是同一对象，消息传递才会成功。以下是发送消息执行的判断：</em></p>

<figure class='code'><figcaption><span>消息发送的判断</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">observer</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">())</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">observer</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">()</span> <span class="o">==</span> <span class="n">object</span> <span class="o">||</span> <span class="n">observer</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">object</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（3）局部变量的传递，注意到上例，传递的是CCString的一个局部变量（但还是要autorelease），从CCNotificationCenter的实现上来看，这是没有问题的，因为数据是在postNotification被调用的，也就是整个函数体并没结束，数据不会被销毁。</em></p>

<h3>6.效果图</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131204150850171" alt="" border="0" title="效果" /><br></br></div>


<h3>7.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6647453">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/12/03/play-cocos2dx-28/'>http://start530.github.io/blog/2013/12/03/play-cocos2dx-28/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十七】CCSequence不能执行CCRepeatForever]]></title>
    <link href="http://start530.github.io/blog/2013/11/28/play-cocos2dx-27/"/>
    <updated>2013-11-28T09:25:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/28/play-cocos2dx-27</id>
    <content type="html"><![CDATA[<p>之前在遇到这么一个问题，在CCSequence中加入CCRepeatForever，发现其他动作执行没问题，就是CCRepeatForever无法执行。代码并没有问题，很奇怪。</p>

<h3>1.示例</h3>

<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCBlink</span><span class="o">*</span> <span class="n">blink</span><span class="o">=</span><span class="n">CCBlink</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="c1">//创建闪烁动画，duration=0.5s  </span>
</span><span class='line'>    <span class="n">CCAnimation</span><span class="o">*</span> <span class="n">animation</span><span class="o">=</span><span class="n">CCAnimation</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDelayPerUnit</span><span class="p">(</span><span class="mf">1.0f</span><span class="p">);</span><span class="c1">//帧间间隔1s  </span>
</span><span class='line'>    <span class="n">CCAnimate</span><span class="o">*</span> <span class="n">animate</span><span class="o">=</span><span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span><span class="c1">//创建帧动画  </span>
</span><span class='line'>    <span class="n">CCRepeatForever</span><span class="o">*</span> <span class="n">repeat</span><span class="o">=</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animate</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">sequence</span><span class="o">=</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">blink</span><span class="p">,</span><span class="n">repeat</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建连续动画  </span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span><span class="mi">160</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">sequence</span><span class="p">);</span><span class="c1">//执行连续动画  </span>
</span></code></pre></td></tr></table></div></figure>


<p>结果精灵闪烁10次以后，帧动画不执行了。</p>

<!-- more -->


<h3>2.原因</h3>

<p>先了解一下CCSequence的创建和执行原理。</p>

<p><strong>2.1.CCSequence的创建</strong></p>

<p>创建CCSequence调用</p>

<figure class='code'><figcaption><span>创建CCSequence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pAction1</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>内部调用了createWithVariableList，从实现可以看出这是一个递归调用。</p>

<figure class='code'><figcaption><span>createWithVariableList</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//获取动作列表，创建CCSequence  </span>
</span><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">createWithVariableList</span><span class="p">(</span><span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pAction1</span><span class="p">,</span> <span class="n">va_list</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pNow</span><span class="p">;</span><span class="c1">//当前动作  </span>
</span><span class='line'>      <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pPrev</span> <span class="o">=</span> <span class="n">pAction1</span><span class="p">;</span><span class="c1">//第一个动作  </span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bOneAction</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//只有一个动作的标志位  </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">pAction1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pNow</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">CCFiniteTimeAction</span><span class="o">*</span><span class="p">);</span><span class="c1">//获取当前动作  </span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">pNow</span><span class="p">)</span><span class="c1">//如果存在  </span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">pPrev</span> <span class="o">=</span> <span class="n">createWithTwoActions</span><span class="p">(</span><span class="n">pPrev</span><span class="p">,</span> <span class="n">pNow</span><span class="p">);</span><span class="c1">//用前两个动作创建CCSequence并赋给第一个动作  </span>
</span><span class='line'>              <span class="n">bOneAction</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span><span class="c1">//置false  </span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span><span class="c1">//如果不存在  </span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// If only one action is added to CCSequence, make up a CCSequence by adding a simplest finite time action.  </span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">bOneAction</span><span class="p">)</span><span class="c1">//如果只有一个动作  </span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">pPrev</span> <span class="o">=</span> <span class="n">createWithTwoActions</span><span class="p">(</span><span class="n">pPrev</span><span class="p">,</span> <span class="n">ExtraAction</span><span class="o">::</span><span class="n">create</span><span class="p">());</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span><span class="c1">//跳出循环  </span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">((</span><span class="n">CCSequence</span><span class="o">*</span><span class="p">)</span><span class="n">pPrev</span><span class="p">);</span><span class="c1">//返回第一个动作  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如有3个动作要被串联，则先把第1个和第2个串联一个CCSequence，再把这个CCSequence和第3个动作串联成最终的CCSequence，然后返回。从CCSequence的成员变量可以看到：</p>

<figure class='code'><figcaption><span>动作对象指针成员变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">m_pActions</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="c1">//表明只包含2个动作对象指针</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用递归多少会降低程序的运行效率，但是却可以换来代码的简洁性，同样的CCSpawn也是这么实现的。
在createWithTwoActions中，调用了initWithTwoActions函数，实现了把两个动作串成一个CCSequence，关键代码如下：</p>

<figure class='code'><figcaption><span>initWithTwoActions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="n">pActionOne</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">()</span> <span class="o">+</span> <span class="n">pActionTwo</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">();</span><span class="c1">//获取两个动作的duration  </span>
</span><span class='line'>    <span class="n">CCActionInterval</span><span class="o">::</span><span class="n">initWithDuration</span><span class="p">(</span><span class="n">d</span><span class="p">);</span><span class="c1">//赋给新的CCSequence  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">m_pActions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pActionOne</span><span class="p">;</span><span class="c1">//同时把两个动作赋给m_pActions指针数组  </span>
</span><span class='line'>    <span class="n">pActionOne</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">m_pActions</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pActionTwo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pActionTwo</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.duration</strong></p>

<p>从示例可以看出，闪烁动画blink的duration是0.5s，那CCRepeatForever呢？1s？当然不是，1s只是帧动画animate的帧间间隔，每个帧动画包含2帧，而CCRepeatForever的duration是0。因此，当示例中的闪烁动画blink和重复动画repeat串联成CCSequence sequence的时候，sequence的duration就变成0.5+0=0.5s，这很重要。</p>

<p><strong>2.3.m_split</strong></p>

<p>CCSequence中有这么一个成员变量</p>

<figure class='code'><figcaption><span>m_split</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">float</span> <span class="n">m_split</span><span class="p">;</span><span class="c1">//记录了第一个动画时长占总时长的比例，也就是2个动画的时长分界  </span>
</span></code></pre></td></tr></table></div></figure>


<p>当执行runAction的时候，CCSequence会调用</p>

<figure class='code'><figcaption><span>startWithTarget</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">startWithTarget</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pTarget</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCActionInterval</span><span class="o">::</span><span class="n">startWithTarget</span><span class="p">(</span><span class="n">pTarget</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_split</span> <span class="o">=</span> <span class="n">m_pActions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_fDuration</span><span class="p">;</span><span class="c1">//获取第一个动画占总时长的比例  </span>
</span><span class='line'>      <span class="n">m_last</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这里由于blink占了0.5s，repeat占了0s，总时长0.5s，所以m_split是0.5/0.5=1。blink占满了整个CCSequence，所以CCSequence无法执行repeat。</p>

<p>这时候再来看CCSequence::update(float dt)函数的执行，就会恍然大悟了。</p>

<figure class='code'><figcaption><span>update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">int</span> <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//当前播放动作索引  </span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">new_t</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span><span class="c1">//新播放进度  </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">m_split</span> <span class="p">)</span> <span class="p">{</span><span class="c1">//播放进度&lt;分界进度  </span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//设置当前播放的是第一个动作  </span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">m_split</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span><span class="c1">//如果第一个动作时长占比!=0  </span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">/</span> <span class="n">m_split</span><span class="p">;</span><span class="c1">//计算出第一个动作新的播放进度  </span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置第一个已播放完毕  </span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="c1">//播放进度&gt;=分界进度  </span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置当前播放的是第二个动作  </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">m_split</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span><span class="c1">//如果第一个动作时长占比==1  </span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置第二个动作已完成  </span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">m_split</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">m_split</span> <span class="p">);</span><span class="c1">//计算出第二个动作新的播放进度  </span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.注意</h3>

<p><em>（1）CCSpawn也会有这个问题，所以CCSpawn也无法执行加入其中的CCRepeatForever动作。</em></p>

<p><em>（2）CCRepeatForever的反转动作也是无效了，一个不会停止的动作从什么地方开始反转？当然你可以先把动作反转了再加入CCRepeatForever中，这是没问题的。</em></p>

<h3>4.解决方案</h3>

<p><em>（1）对于同时动作，不使用CCSpawn，采用分别执行</em></p>

<figure class='code'><figcaption><span>分别执行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">blink</span><span class="p">);</span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">repeat</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（2）对于连续动作，不直接往CCSequence中加入CCRepeatForever，而是把CCRepeatForever放入瞬时动作CCCallFunc中，再把CCCallFunc加入CCSequence中执行。</em></p>

<figure class='code'><figcaption><span>CCSequence串联</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CCBlink</span><span class="o">*</span> <span class="n">blink</span><span class="o">=</span><span class="n">CCBlink</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CCCallFunc</span><span class="o">*</span> <span class="n">callFunc</span><span class="o">=</span><span class="n">CCCallFunc</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">callfunc_selector</span><span class="p">(</span><span class="n">TestScene</span><span class="o">::</span><span class="n">repeatFunc</span><span class="p">));</span><span class="c1">//创建CCCallFunc对象  </span>
</span><span class='line'>  <span class="n">CCSequence</span><span class="o">*</span> <span class="n">sequence</span><span class="o">=</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">blink</span><span class="p">,</span><span class="n">callFunc</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//把CCCallFunc对象加入CCSequence中  </span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span><span class="mi">160</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">sequence</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">TestScene</span><span class="o">::</span><span class="n">repeatFunc</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCAnimation</span><span class="o">*</span> <span class="n">animation</span><span class="o">=</span><span class="n">CCAnimation</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDelayPerUnit</span><span class="p">(</span><span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCAnimate</span><span class="o">*</span> <span class="n">animate</span><span class="o">=</span><span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCRepeatForever</span><span class="o">*</span> <span class="n">repeat</span><span class="o">=</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animate</span><span class="p">);</span>
</span><span class='line'>      <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">repeat</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（3）对于CCAnimation帧动画，可以设置循环属性，而不使用CCRepeatForever。</em></p>

<figure class='code'><figcaption><span>setLoops</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setLoops</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.总结</h3>

<p>虽然CCRepeatForever也同样继承于CCActionInterval，理论上是延时动作的子类，但是和一般的延时动作又有很大的不同，所以平时在使用的时候必须很小心，不能当成一般的CCActionInterval使用。而在cocos2d-x动作的分类上是不是应该把它从CCAction继承出来会比较好一点？<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/28/play-cocos2dx-27/'><a href="http://start530.github.io/blog/2013/11/28/play-cocos2dx-27/">http://start530.github.io/blog/2013/11/28/play-cocos2dx-27/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十六】数据结构CCDictionary]]></title>
    <link href="http://start530.github.io/blog/2013/11/26/play-cocos2dx-26/"/>
    <updated>2013-11-26T09:00:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/26/play-cocos2dx-26</id>
    <content type="html"><![CDATA[<p>CCDictionary在cocos2d-x中被大量的应用，比如CCTexureCache，CCSpriteFramCache等等。</p>

<h3>1.实现原理</h3>

<p><strong>1.1.uthash</strong></p>

<p>CCDictionary是使用uthash实现的，而过时的CCMutableDictionary则是使用STL实现，就效率而言CCDictionary至少提升了两倍，而且CCDictionary并没有使用C++模版，因此也很容易绑定到脚本。</p>

<p>uthash是一个C/C++的哈希表实现，它以宏定义的方式实现了哈希表，不仅加快了运行速度，而且与key类型无关。它的github在<a href="https://github.com/troydhanson/uthash">这里</a>。cocos2d-x的头文件在\cocos2d-x-2.2.0\cocos2dx\support\data_support\uthash.h。</p>

<!-- more -->


<p>如果想在C++中直接使用也很简单，userguide在<a href="http://troydhanson.github.io/uthash/userguide.html">这里</a>。可以很方便地进行增加，删除，查找，计数，迭代，排序等操作。</p>

<p><strong>1.2.键（key）</strong></p>

<p>uthash支持4种标准类型的键：整型，字符串，指针和结构体，不过到了CCDictionary就只支持整型和字符串型了。</p>

<figure class='code'><figcaption><span>CCDictType</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">enum</span> <span class="n">CCDictType</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">kCCDictUnknown</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="n">kCCDictStr</span><span class="p">,</span>
</span><span class='line'>      <span class="n">kCCDictInt</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.CCDictElement</h3>

<p>在了解CCDictionary之前还要看一下CCDictElement，很明显，CCDictElement是CCDictionary的一个元素，包含了一个key-value。key支持整型和字符串，使用的时候要注意在同一个CCDictionary中key类型必须要一致，value可以不一致。</p>

<h3>3.API</h3>

<p><strong>3.1.创建</strong></p>

<figure class='code'><figcaption><span>创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//创建一个CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//用一个已存在的CCDictionary来创建一个新的CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithDictionary</span><span class="p">(</span><span class="n">CCDictionary</span><span class="o">*</span> <span class="n">srcDict</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//用一个plist来创建CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithContentsOfFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pFileName</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回一个非autorelease对象的CCDictionary，它讷讷感够确保在新线程中使用  </span>
</span><span class='line'>    <span class="c1">//但是你必须手动管理它的生命周期，当你不再需要它的时候，必须调用CC_SAFE_RELEASE  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithContentsOfFileThreadSafe</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pFileName</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.查找</strong></p>

<figure class='code'><figcaption><span>查找</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//返回指定字符串类型key的value，如果CCDictionary的key是整型，会出现断言  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">objectForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定整型key的value，如果CCDictionary的key是字符串型，会出现断言  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">objectForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定字符串类型key的CCString，这里假定value是CCString型，如果不是或者未找到，则返回空串  </span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CCString</span><span class="o">*</span> <span class="n">valueForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定整型类型key的CCString，这里假定value是CCString型，如果不是或者未找到，则返回空串  </span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CCString</span><span class="o">*</span> <span class="n">valueForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.3.增加</strong></p>

<figure class='code'><figcaption><span>增加</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//插入一个key-value，如果是第一次调用，那么CCDictionary的key类型会被确定为字符串型，之后就不能插入整型key  </span>
</span><span class='line'>    <span class="c1">//如果已存在该key，则旧key-value会被释放和移除，被新的替代  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//插入一个key-value，如果是第一次调用，那么CCDictionary的key类型会被确定为整型，之后就不能插入字符串型key  </span>
</span><span class='line'>    <span class="c1">//如果已存在该key，则旧key-value会被释放和移除，被新的替代  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.4.移除</strong></p>

<figure class='code'><figcaption><span>移除</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//移除指定key  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除一个CCArray中keys  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectsForKeys</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">pKeyArray</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//通过元素来移除value  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForElememt</span><span class="p">(</span><span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pElement</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除所有的key-value  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeAllObjects</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.5.其他</strong></p>

<figure class='code'><figcaption><span>其他</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//返回一个随机元素，这个使用得注意，因为value可以不一样，所以返回类型每次都可能不同，在类型转换的时候要非常小心  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">randomObject</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回一个包含所有key的CCArray  </span>
</span><span class='line'>    <span class="n">CCArray</span><span class="o">*</span> <span class="n">allKeys</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回指定value的所有key，因为value是可以相同的，内部使用==比较两个value是否相同   </span>
</span><span class='line'>    <span class="n">CCArray</span><span class="o">*</span> <span class="n">allKeysForObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回元素个数  </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//把CCDictionary写到一个plist中，写入的value要求是字符串型  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">writeToFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fullPath</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.示例</h3>

<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">// Create a dictionary, return an autorelease object.  </span>
</span><span class='line'>    <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">pDict</span> <span class="o">=</span> <span class="n">CCDictionary</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Insert objects to dictionary  </span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pValue1</span> <span class="o">=</span> <span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;100&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pValue2</span> <span class="o">=</span> <span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;120&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCInteger</span><span class="o">*</span> <span class="n">pValue3</span> <span class="o">=</span> <span class="n">CCInteger</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue1</span><span class="p">,</span> <span class="s">&quot;key1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue2</span><span class="p">,</span> <span class="s">&quot;key2&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue3</span><span class="p">,</span> <span class="s">&quot;key3&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the object for key  </span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pStr1</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCString</span><span class="o">*</span><span class="p">)</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">objectForKey</span><span class="p">(</span><span class="s">&quot;key1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ key1: %s }&quot;</span><span class="p">,</span> <span class="n">pStr1</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>    <span class="n">CCInteger</span><span class="o">*</span> <span class="n">pInteger</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCInteger</span><span class="o">*</span><span class="p">)</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">objectForKey</span><span class="p">(</span><span class="s">&quot;key3&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ key3: %d }&quot;</span><span class="p">,</span> <span class="n">pInteger</span><span class="o">-&gt;</span><span class="n">getValue</span><span class="p">());</span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pStr3</span><span class="o">=</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">CCString</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">randomObject</span><span class="p">());</span><span class="c1">//这里有问题了，因为value有不同类型，所以随机返回时类型处理要小心  </span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ random key: %s }&quot;</span><span class="p">,</span><span class="n">pStr3</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>  <span class="c1">//如果返回的是整型pValue3，那么会出现断言  </span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">writeToFile</span><span class="p">(</span><span class="s">&quot;pdic.plist&quot;</span><span class="p">))</span>  <span class="c1">//整型的value无法写入，会提示This type cannot appear in property list  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;Write to file success!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resource/pdic.plist</p>

<figure class='code'><figcaption><span>pdic.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>  <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key1<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>100<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>120<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key3<span class="nt">&lt;/key&gt;</span>  <span class="cp">&lt;!key3对应整型数据无法写入/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.CCDICT_FOREACH</h3>

<p><strong>5.1.概况</strong></p>

<p>宏定义，用于遍历CCDictionary的value。</p>

<figure class='code'><figcaption><span>CCDICT_FOREACH宏定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">CCDICT_FOREACH</span><span class="p">(</span><span class="n">__dict__</span><span class="p">,</span> <span class="n">__el__</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>    <span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pTmp</span><span class="err">##</span><span class="n">__dict__</span><span class="err">##</span><span class="n">__el__</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">__dict__</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>    <span class="n">HASH_ITER</span><span class="p">(</span><span class="n">hh</span><span class="p">,</span> <span class="p">(</span><span class="n">__dict__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">m_pElements</span><span class="p">,</span> <span class="n">__el__</span><span class="p">,</span> <span class="n">pTmp</span><span class="err">##</span><span class="n">__dict__</span><span class="err">##</span><span class="n">__el__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>5.2.示例</strong></p>

<figure class='code'><figcaption><span>CCDICT_FOREACH示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pElement</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CCDICT_FOREACH</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">pElement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">pElement</span><span class="o">-&gt;</span><span class="n">getStrKey</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// You certainly know the type of value, so we assume that it&#39;s a CCSprite.  </span>
</span><span class='line'>      <span class="n">CCSprite</span><span class="o">*</span> <span class="n">pSprite</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCSprite</span><span class="o">*</span><span class="p">)</span><span class="n">pElement</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// ......  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/26/play-cocos2dx-26/'>http://start530.github.io/blog/2013/11/26/play-cocos2dx-26/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十五】数据结构CCArray]]></title>
    <link href="http://start530.github.io/blog/2013/11/25/play-cocos2dx-25/"/>
    <updated>2013-11-25T13:53:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/25/play-cocos2dx-25</id>
    <content type="html"><![CDATA[<p>CCArray是从cocos2d中移植过来的，类似于Apple的NSMutableArray，但是比NSMutableArray更为的好用。要注意的是虽然CCArray和CCDictionary可以管理cocos2d-x中绝大多数的类，但是仍然无法替代STL库，STL库更为强有力。</p>

<h3>1.API</h3>

<p>先看一下CCArray可以帮我们做什么。</p>

<!-- more -->


<p><strong>1.1.创建</strong></p>

<figure class='code'><figcaption><span>创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//创建array  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCArray</span><span class="o">*</span> <span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//使用一系列CCObject创建array  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCArray</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="err">…</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//使用一个CCObject创建array  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCArray</span><span class="o">*</span> <span class="n">createWithObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//创建array并设置容量  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCArray</span><span class="o">*</span> <span class="n">createWithCapacity</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">capacity</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//用一个已存在的array创建另一个array  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCArray</span><span class="o">*</span> <span class="n">createWithArray</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">otherArray</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>1.2.添加</strong></p>

<figure class='code'><figcaption><span>添加</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//添加一个元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">addObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//添加一个已存在array中所有元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">addObjectsFromArray</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">otherArray</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//在指定位置插入元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">insertObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>1.3.删除</strong></p>

<figure class='code'><figcaption><span>删除</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//移除最后一个元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeLastObject</span><span class="p">(</span><span class="kt">bool</span> <span class="n">bReleaseObj</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除某个元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">bReleaseObj</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除一个指定位置的元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectAtIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">bReleaseObj</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除某个array  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectsInArray</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">otherArray</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除所有元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeAllObjects</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//快速移除某个元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">fastRemoveObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//快速移除某个指定位置的元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">fastRemoveObjectAtIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>1.4.操作元素</strong></p>

<figure class='code'><figcaption><span>操作元素</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//返回元素个数  </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//返回array容量  </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">capacity</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//返回指定CCObject的位置，如果不存在返回UINT_MAX  </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">indexOfObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//返回指定位置的CCObject  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">objectAtIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回最后一个元素  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">lastObject</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回随机元素  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">randomObject</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回某个元素是否存在于array中  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">containsObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//判断array是否相等  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isEqualToArray</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">pOtherArray</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>1.5.操作array内容</strong></p>

<figure class='code'><figcaption><span>操作array内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//交换2个元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">exchangeObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object1</span><span class="p">,</span> <span class="n">CCObject</span><span class="o">*</span> <span class="n">object2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//交换2个指定位置元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">exchangeObjectAtIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index1</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//用一个对象替代指定位置元素  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">replaceObjectAtIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">uIndex</span><span class="p">,</span> <span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">bReleaseObject</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//反转array  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">reverseObjects</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//收缩array内存以匹配元素个数  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">reduceMemoryFootprint</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.remove和fastremove</h3>

<p>从<strong>1.3</strong>可以看出删除有两种方式，普通删除和快速删除，它们有什么区别呢？</p>

<p><strong>2.1.普通删除</strong></p>

<figure class='code'><figcaption><span>普通删除</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>
</span><span class='line'>    <span class="c1">//普通删除  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">ccArrayRemoveObjectAtIndex</span><span class="p">(</span><span class="n">ccArray</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">bReleaseObj</span><span class="cm">/* = true*/</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCAssert</span><span class="p">(</span><span class="n">arr</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">,</span> <span class="s">&quot;Invalid index. Out of bounds&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//删除元素内容，位置仍保留着  </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">bReleaseObj</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CC_SAFE_RELEASE</span><span class="p">(</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">//长度减1  </span>
</span><span class='line'>      <span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//获得要删除的元素后的元素个数  </span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">remaining</span> <span class="o">=</span> <span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">-</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">remaining</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">//将要删除元素后的所有元素逐个向前移动  </span>
</span><span class='line'>          <span class="n">memmove</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">remaining</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.快速删除</strong></p>

<figure class='code'><figcaption><span>快速删除</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//快速删除  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">ccArrayFastRemoveObjectAtIndex</span><span class="p">(</span><span class="n">ccArray</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//删除元素内容，位置仍保留着  </span>
</span><span class='line'>      <span class="n">CC_SAFE_RELEASE</span><span class="p">(</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span><span class='line'>      <span class="c1">//获取最后一个元素  </span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="o">--</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//把最后一个元素插到删除元素的位置上  </span>
</span><span class='line'>      <span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">last</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.3.总结</strong></p>

<p>如果有array={0,1,2,3,4,5}，如果要删除3，使用普通删除得到的结果{0,1,2,4,5}，使用快速删除得到的结果是{0,1,2,5,4}。可以看出快速删除的效率比普通删除效率高，就差在移动元素的时间复杂度上。</p>

<h3>3.内存分配</h3>

<p><strong>3.1.容量和个数</strong>
CCArray中容量和个数并不是同一个概念。个数&lt;=容量。从添加元素的源码中可以看到在添加之前会先进行空间分配，所以它是一个动态分配内存的过程。如下</p>

<figure class='code'><figcaption><span>内存分配</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">void</span> <span class="n">ccArrayEnsureExtraCapacity</span><span class="p">(</span><span class="n">ccArray</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">extra</span><span class="p">)</span><span class="c1">//确保有额外的空间  </span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="o">-&gt;</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">+</span> <span class="n">extra</span><span class="p">)</span><span class="c1">//判断空间是否足够  </span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">ccArrayDoubleCapacity</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span><span class="c1">//增加一倍空间  </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，每次CCArray在插入数据时检测到空间不足会增加一倍空间，再进行检测，直到空间满足分配为止。</p>

<p><strong>3.2.判等</strong></p>

<p>判断2个CCArray是否相等使用isEqualToArray()，判断相等的条件是CCArray中的每个元素相等即可，与CCArray的容量无关。</p>

<h3>4.效率</h3>

<p>比起NSMutableArray，CCArray效率能高出10%左右，原因有三：</p>

<p><em>（1）它使用的是C接口，所以它不有Objective-C消息开销。</em></p>

<p><em>（2）它假定你知道你在做什么，所以它不花时间在安全检查上（如边界溢出，空间需求等）。</em></p>

<p><em>（3）在比较上使用了指针而不是isEqual。</em></p>

<p>除了CCArray，我们还看到了ccCArray，CCArray基本上都是调用了ccCArray的函数，为什么要分为2种？
仔细看一下CCArray是继承于CCObject，所以CCArray是用于处理cocos2d-x对象的，内存管理上也有cocos2d-x的autorelease等诸多特性。而ccCArray可以直接操作标准的C数据结构和类型。</p>

<h3>5.CCARRAY_FOREACH和CCARRAY_FOREACH_REVERSE</h3>

<p>宏定义，用于正向遍历和反向遍历CCArray元素</p>

<figure class='code'><figcaption><span>正反向遍历CCArray</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">CCARRAY_FOREACH</span><span class="p">(</span><span class="n">__array__</span><span class="p">,</span> <span class="n">__object__</span><span class="p">)</span>                                                                         <span class="err">\</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">__array__</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>                                                                     <span class="err">\</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">CCObject</span><span class="o">**</span> <span class="n">__arr__</span> <span class="o">=</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">,</span> <span class="o">**</span><span class="n">__end__</span> <span class="o">=</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">arr</span> <span class="o">+</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>    <span class="err">\</span>
</span><span class='line'>      <span class="n">__arr__</span> <span class="o">&lt;=</span> <span class="n">__end__</span> <span class="o">&amp;&amp;</span> <span class="p">(((</span><span class="n">__object__</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="n">__arr__</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="cm">/* || true*/</span><span class="p">);</span>                                             <span class="err">\</span>
</span><span class='line'>      <span class="n">__arr__</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">CCARRAY_FOREACH_REVERSE</span><span class="p">(</span><span class="n">__array__</span><span class="p">,</span> <span class="n">__object__</span><span class="p">)</span>                                                                  <span class="err">\</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">__array__</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>                                                                      <span class="err">\</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">CCObject</span><span class="o">**</span> <span class="n">__arr__</span> <span class="o">=</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">arr</span> <span class="o">+</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">**</span><span class="n">__end__</span> <span class="o">=</span> <span class="p">(</span><span class="n">__array__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">;</span>     <span class="err">\</span>
</span><span class='line'>      <span class="n">__arr__</span> <span class="o">&gt;=</span> <span class="n">__end__</span> <span class="o">&amp;&amp;</span> <span class="p">(((</span><span class="n">__object__</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="n">__arr__</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="cm">/* || true*/</span><span class="p">);</span>                                              <span class="err">\</span>
</span><span class='line'>      <span class="n">__arr__</span><span class="o">--</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6.示例</h3>

<p>CCArray的使用示例在<a href="http://blog.csdn.net/jackystudio/article/details/11917875">此文</a>中有比较典型的应用，这里就不再详述。</p>

<h3>7.注意</h3>

<p>一般来说，CCArray不会被add到其他类，所以它的引用计数是1，而且被设置为自动释放。所以创建CCArray对象时要记得调用retain，而且在析构的时候也要调用release来释放内存。真心想吐槽。。。</p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/25/play-cocos2dx-25/'>http://start530.github.io/blog/2013/11/25/play-cocos2dx-25/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十四】截图保存功能的实现]]></title>
    <link href="http://start530.github.io/blog/2013/11/13/play-cocos2dx-24/"/>
    <updated>2013-11-13T08:34:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/13/play-cocos2dx-24</id>
    <content type="html"><![CDATA[<p>官方TestCpp有这个demo了，这里还是把它单独拖出来写一下，游戏推广的一个很重要组成就是玩家分享，所以游戏截图就起到很大作用了。截图功能通过CCRenderTexture实现。</p>

<h3>1.CCRenderTexture</h3>

<p>CCRenderTexture是一个通用渲染对象，可以通过构建一个CCRenderTexture对象，进而把要渲染的东西填充进去，在渲染开始前调用call函数，调用cocos的场景的visit函数对其进行渲染，渲染结束后调用end函数。CCRenderTexture继承于CCNode，所以可以简单地把渲染纹理添加到你的场景中，就像处理其它cocos中的节点一样，当然它还提供了保存功能，可以把渲染纹理保存为PNG或JPG格式。</p>

<!-- more -->


<h3>2.API</h3>

<pre><code>   //创建和初始化函数  
   static CCRenderTexture * create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);  
   static CCRenderTexture * create(int w, int h, CCTexture2DPixelFormat eFormat);  
   static CCRenderTexture * create(int w, int h);  
   bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat);  
   bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);  

   //开始获取  
   void begin();  

   //开始渲染时清除之前渲染的内容  
   void beginWithClear(float r, float g, float b, float a);  
   void beginWithClear(float r, float g, float b, float a, float depthValue);  
   void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue);  

   //结束获取  
   void end();  

   //清除纹理  
   void clear(float r, float g, float b, float a);  
   void clearDepth(float depthValue);  
   void clearStencil(int stencilValue);  

   //保存纹理为图片文件，可以选择JPG/PNG格式，默认是JPEG格式，成功返回真  
   bool saveToFile(const char *szFilePath);  
   bool saveToFile(const char *name, tCCImageFormat format);  
</code></pre>

<h3>3.示例</h3>

<p>修改HelloWorld中结束菜单的回调函数如下：</p>

<pre><code>void CTestLayer::menuCloseCallback(CCObject* pSender)  
{  
    SaveScreenShot();  
}  

//截图功能  
void CTestLayer::SaveScreenShot()  
{  
    //获取屏幕尺寸  
    CCSize size = CCDirector::sharedDirector()-&gt;getWinSize();  
    //使用屏幕尺寸初始化一个空的渲染纹理对象  
    CCRenderTexture* texture = CCRenderTexture::create((int)size.width, (int)size.height);  
    //设置位置  
    texture-&gt;setPosition(ccp(size.width/2, size.height/2));  
    //开始获取  
    texture-&gt;begin();  
    //遍历场景节点对象，填充纹理到texure中  
    CCDirector::sharedDirector()-&gt;getRunningScene()-&gt;visit();  
    //结束获取  
    texture-&gt;end();  
    //保存为PNG图，Win32/Debug目录下  
    texture-&gt;saveToFile("screenshot.png", kCCImageFormatPNG);  
}  
</code></pre>

<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6538305">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/13/play-cocos2dx-24/'><a href="http://start530.github.io/blog/2013/11/13/play-cocos2dx-24/">http://start530.github.io/blog/2013/11/13/play-cocos2dx-24/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十三】多线程和同步03-图片异步加载]]></title>
    <link href="http://start530.github.io/blog/2013/11/11/play-cocos2dx-23/"/>
    <updated>2013-11-11T11:22:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/11/play-cocos2dx-23</id>
    <content type="html"><![CDATA[<p>cocos2d-x中和Android，Windows都一样，如果在主线程中处理一些耗时操作，那么主线程就会出现阻塞现象，表现在界面上就是卡住，未响应等情况。为了避免这种情况的出现，我们需要在后台开辟工作线程进行数据的处理，再采用消息传递或者其他形式来通知主线程进行UI变化。最常见的情况就是游戏进入前的loading。</p>

<h3>1.图片的异步加载</h3>

<p>在多线程和同步的第一篇介绍到使用pthread库的时候，讲到由于CCAutoreleasePool不是线程安全的，所以不能在工作线程中引入cocos2d-x相关的API（其实并不是所有的API都不能使用）。但是cocos2d-x显然考虑到这个问题了，所以它本身就帮我们封装好了一个API，避免了还要手动引入pthread库的尴尬。</p>

<pre><code>void CCTextureCache::addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector)  
</code></pre>

<!--more -->


<p>其中path是图片的位置，selector是加载完成时的回调函数。很方便，如果需要加载很多图片的话，对每一个进行回调处理，然后在update中更新UI即可。</p>

<h3>2.plist的异步加载</h3>

<p>可是由于内存原因，大部分情况下图片会被合成打包，同时带入plist。这时候如何进行图片的异步加载呢？这个时候就需要对addImageAsync的源码进一步的探究了。</p>

<p><strong>2.1.耗时的是什么？</strong></p>

<p>首先要理解的是耗时的动作是什么，只有把耗时的工作真正抓出来丢到工作线程上，异步加载才有意义。我们知道，图片在内存中是以纹理的形式存在的，而图片的加载，通俗来讲也就是纹理的生成，这就是耗时的原因。那CCTexureCache中addImage（同步加载）和addImageAysnc（异步加载）分别做了什么事？</p>

<p><em>（1）addImage</em>
可以看出addImage使用同步的方式生成了纹理，也就是在主线程中进行了耗时的加载操作。</p>

<pre><code>//...cocos2d-x维护着一个全局纹理，在判断纹理是否已存在  
if (! texture)   
    {  
        do   
        {  
        //...判断图片格式  

            pImage = new CCImage();  
            CC_BREAK_IF(NULL == pImage);  

            bool bRet = pImage-&gt;initWithImageFile(fullpath.c_str(), eImageFormat);  
            CC_BREAK_IF(!bRet);  

            texture = new CCTexture2D();    //开辟纹理空间  

            if( texture &amp;&amp;  
                texture-&gt;initWithImage(pImage) )  //使用CCImage初始化纹理  
            {  
#if CC_ENABLE_CACHE_TEXTURE_DATA  
                // cache the texture file name  
                VolatileTexture::addImageTexture(texture, fullpath.c_str(), eImageFormat);  
#endif  
                m_pTextures-&gt;setObject(texture, pathKey.c_str());  
                texture-&gt;release();  
            }  
            else  
            {  
                CCLOG("cocos2d: Couldn't create texture for file:%s in CCTextureCache", path);  
            }  
        } while (0);  
    }  
//...释放资源，返回纹理  
</code></pre>

<p><em>（2）addImageAsync</em></p>

<p>addImageAsync则是在工作线程中加载图片，然后通过调度器进行纹理的转换。</p>

<pre><code>//创建工作线程用于后台加载图片  
pthread_create(&amp;s_loadingThread, NULL, loadImage, NULL);  

//创建调度队列，用来根据已加载的图片进行纹理转换  
CCDirector::sharedDirector()-&gt;getScheduler()-&gt;scheduleSelector(schedule_selector(CCTextureCache::addImageAsyncCallBack), this, 0, false);  

void CCTextureCache::addImageAsyncCallBack(float dt)  
{  
    //...  
    CCTexture2D *texture = new CCTexture2D();   //开辟纹理空间  
#if 0 //TODO: (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)  
    texture-&gt;initWithImage(pImage, kCCResolutioniPhone);  
#else  
    texture-&gt;initWithImage(pImage);      //使用CCImage初始化纹理  
#endif  

#if CC_ENABLE_CACHE_TEXTURE_DATA  

   VolatileTexture::addImageTexture(texture, filename, pImageInfo-&gt;imageType);  
#endif  
    //...将加入autorelease，进行加载后的回调函数的调用，释放相关资源  
}  
</code></pre>

<p><strong>2.2.plist加载的原理</strong></p>

<p>之前使用plist是这样子的：</p>

<pre><code>void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist)//传入plist文件即可  
</code></pre>

<p>在它的实现中，发现了这么一句：</p>

<pre><code>CCTexture2D *pTexture = CCTextureCache::sharedTextureCache()-&gt;addImage(texturePath.c_str());  
</code></pre>

<p>原来addSpriteFramesWithFile会先查找是否存在纹理，否则会在.plist的目录下寻找同名图片，然后调用同步的addImage函数来生成纹理。这也就是为什么只加载了plist，而纹理就会存在的原因了。</p>

<p><strong>2.3.异步加载plist</strong></p>

<p>知道了这些，那就让addSpriteFramesWithFile调用异步的addImageAsync函数就可以了，当然不需要改源码，因为CCSpriteFrameCache还提供了如下的plist加载方式：</p>

<pre><code>void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture)  
</code></pre>

<p>所以我们可以手动异步生成纹理后，在回调函数中和.plist一起传入addSpriteFramesWithFile，搞定！还记得刚开始的selector么？生成的纹理会作为参数传入这个回调函数中，完美！</p>

<p><strong>2.4.注意</strong></p>

<p>只要注意一点的是，在使用任何plist中的小图片时，引擎并不会为每一张小图片生成一个纹理，而是共用了大图片的纹理，同时指定了小图片的坐标和长宽。</p>

<h3>3.示例</h3>

<p>其中ui_text.png是大图片，raffle_b_friend.png和raffle_b_diamond.png是两张小图片。</p>

<pre><code>bool CTestLayer::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCLayer::init());  

        //addImage or addImageAsync中创建纹理  
        CCTextureCache::sharedTextureCache()-&gt;addImageAsync("ui_text.png",this,callfuncO_selector(CTestLayer::showSprite));  

        bRet=true;  
    } while (0);  
    return bRet;  
}  

void CTestLayer::showSprite(CCObject* obj)  
{  
    CCTexture2D* texture_ui_text=(CCTexture2D*)obj;//传入的obj即是异步生成的纹理  
    CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;addSpriteFramesWithFile("ui_text.plist",texture_ui_text);//通过纹理和.plist文件加入CCSpriteFrameCache  
    CCSprite* raffle_b_friend=CCSprite::createWithSpriteFrameName("raffle_b_friend.png");//尽情使用小图片吧  
    raffle_b_friend-&gt;setPosition(ccp(100,100));  
    this-&gt;addChild(raffle_b_friend);  

    //错误，只能获取ui_text.png的纹理  
    //CCTexture2D* raffle_b_diamond_texture=CCTextureCache::sharedTextureCache()-&gt;textureForKey("raffle_b_diamond.png");  
    //正确，可以用这种先获取精灵帧，再从精灵帧中获取ui_text的纹理，以及大小，来构建CCSprite  
    CCSpriteFrame* raffle_b_diamond_spriteframe=CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;spriteFrameByName("raffle_b_diamond.png");  
    CCTexture2D* texture=raffle_b_diamond_spriteframe-&gt;getTexture();  
    CCRect rect=raffle_b_diamond_spriteframe-&gt;getRect();  
    CCSprite* raffle_b_diamond=CCSprite::createWithTexture(texture,rect); //如果纹理需要旋转，setRotation吧  
    raffle_b_diamond-&gt;setRotation(false);  
    raffle_b_diamond-&gt;setPosition(ccp(300,100));  
    this-&gt;addChild(raffle_b_diamond);  
}  
</code></pre>

<h3>4.效果</h3>

<p>使用异步加载plist方式处理:</p>

<div align="center"><img src="http://img.blog.csdn.net/20131111094358437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="效果图" /><br></br></div>


<h3>5.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6533293">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/11/play-cocos2dx-23/'>http://start530.github.io/blog/2013/11/11/play-cocos2dx-23/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十二】多线程和同步02-售票]]></title>
    <link href="http://start530.github.io/blog/2013/11/05/play-cocos2dx-22/"/>
    <updated>2013-11-05T11:12:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/05/play-cocos2dx-22</id>
    <content type="html"><![CDATA[<p>pthread有很多不同应用，官网都有相应的API解释和Sample，这里不再重复，本文主要介绍一个cocos2d-x多线程和同步示例。</p>

<h3>1.售票</h3>

<p>孙鑫老师的C++和Java多线程售票一直让我念念不忘，好吧，这里用cocos2d-x和pthread实现一个吧。总共有100张火车票，有2个售票点A和B再售票，当票卖完了就结束了。我们知道当程序一开始进程就会创建一个主线程，所以可以在主线程基础上再创建2个线程A和B，再线程A和B中分别售票，当票数为0的时候，结束线程A和B。</p>

<!-- more -->


<h3>2.多线程售票</h3>

<pre><code>//TestLayer.h  
class CTestLayer :  
public CCLayer  
{  
    public:  
    CTestLayer(void);  
    ~CTestLayer(void);  

    CREATE_FUNC(CTestLayer);  
    virtual bool init();  

    pthread_t sellA_pid,sellB_pid;//线程id  
    static int tickets;//票数  

    static void* threadA(void* p);//线程A回调  
    static void* threadB(void* p);//线程B回调  
};  


//TestLayer.cpp  
#include "TestLayer.h"  

int CTestLayer::tickets=100;//初始化票数100  
CTestLayer::CTestLayer(void)  
{  
}  


CTestLayer::~CTestLayer(void)  
{  
}  

bool CTestLayer::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCLayer::init());  
        pthread_create(&amp;sellA_pid,NULL,threadA,0);//创建线程A  
        pthread_create(&amp;sellB_pid,NULL,threadB,0);//创建线程B  

        bRet=true;  
    } while (0);  
    return bRet;  
}  

void* CTestLayer::threadA(void* p)  
{  
    while(true)  
    {  
        if(tickets&gt;0)  
        {  
            CCLog("A Sell %d",tickets--);//输出售票，每次减1  
        }  
        else {  
            break;  
        }  
    }  
    return NULL;  
}  

void* CTestLayer::threadB(void* p)  
{  
    while(true)  
    {  
        if (tickets&gt;0)  
        {  
            CCLog("B Sell %d",tickets--);  
        }  
        else   
        {  
            break;  
        }  
    }  
    return NULL;  
}  
</code></pre>

<p>代码很简单，不多说了。我们来看一下输出，会发现有很多不可思议的现象出现，因为每个人每次运行的结果都不一样，所以这里不贴结果了，不可思议的现象可能有：</p>

<p><em>（1）同一张票卖了2次。</em></p>

<p><em>（2）后面的票比前面的票先卖出去。</em></p>

<p><em>（3）第0张票竟然也可以卖。（这算站票么。。。）</em></p>

<p>原因不多解释了，时间片的问题，不明白的Google之。如果你觉得不会有这么巧，那么在打印结果前加上这么一句：</p>

<pre><code>Sleep(100);  
</code></pre>

<p>人为干扰线程的运行，增大出错几率。结果可能会是这样：</p>

<pre><code>A Sell 36  
B Sell 36//卖2次了  
A Sell 35  
B Sell 34  
A Sell 33  
B Sell 32  
A Sell 30//提早卖了  
B Sell 31  
B Sell 28  
A Sell 29  
A Sell 27  
B Sell 26  
A Sell 25  
B Sell 24  
A Sell 23  
B Sell 22  
A Sell 21  
B Sell 20  
A Sell 19  
B Sell 18  
A Sell 17  
B Sell 16  
A Sell 15  
B Sell 14  
A Sell 13  
B Sell 12  
A Sell 11  
B Sell 10  
A Sell 9  
B Sell 8  
A Sell 7  
B Sell 6  
A Sell 5  
B Sell 4  
A Sell 3  
B Sell 2  
A Sell 1  
B Sell 0//站票。。。  
</code></pre>

<h3>3.利用互斥对象同步数据</h3>

<p>这个问题主要是因为一个线程执行到一半的时候，时间片的切换导致另一个线程修改了同一个数据，当再次切换会原来线程并继续往下运行的时候，数据由于被修改了导致结果出错。所以我们要做的就是保证这个线程完全执行完，所以对线程加锁是个不错的注意，互斥对象mutex就是这个锁。</p>

<p><strong>3.1.初始化</strong></p>

<p>在cpp外分配空间：</p>

<pre><code>pthread_mutex_t CTestLayer::mutex;//mutex是静态成员变量  
</code></pre>

<p>在init中初始化，动态初始化：</p>

<pre><code>pthread_mutex_init(&amp;mutex,NULL);  
</code></pre>

<p><strong>3.2.加锁和解锁</strong></p>

<p>以线程A为例：</p>

<pre><code>void* CTestLayer::threadA(void* p)  
{  
    while(true)  
    {  
        pthread_mutex_lock(&amp;mutex);//加锁  
        if(tickets&gt;0)  
        {  
            Sleep(100);  
            CCLog("A Sell %d",tickets--);  
            pthread_mutex_unlock(&amp;mutex);//解锁  
        }  
        else {  
            pthread_mutex_unlock(&amp;mutex);//解锁  
            break;  
        }  
    }  
    return NULL;  
}  
</code></pre>

<p><strong>3.3.释放</strong></p>

<p>在当前层的析构函数中：</p>

<pre><code>pthread_mutex_destroy(&amp;mutex);//前提要保证是解锁状态，否则会返回16的错误，释放失败  
</code></pre>

<p>这个时候再看一下结果，Bingo!</p>

<pre><code>B Sell 16  
A Sell 15  
B Sell 14  
B Sell 13  
B Sell 12  
B Sell 11  
B Sell 10  
B Sell 9  
B Sell 8  
B Sell 7  
B Sell 6  
B Sell 5  
B Sell 4  
B Sell 3  
B Sell 2  
B Sell 1  
</code></pre>

<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6503759">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/05/play-cocos2dx-22/'><a href="http://start530.github.io/blog/2013/11/05/play-cocos2dx-22/">http://start530.github.io/blog/2013/11/05/play-cocos2dx-22/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十一】多线程和同步01-pthread库]]></title>
    <link href="http://start530.github.io/blog/2013/11/04/play-cocos2dx-21/"/>
    <updated>2013-11-04T11:01:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/11/04/play-cocos2dx-21</id>
    <content type="html"><![CDATA[<p>和其他框架一样，cocos2d-x允许我们使用多线程进行编程。cocos2d-x v2.2.0使用的是pthread库，是一套用户级线程库，被广泛地使用在跨平台应用上。</p>

<h3>1.配置</h3>

<p>在使用pthread之前，需要把头文件和库文件链接进来。pthread的官网<a href="http://www.sourceware.org/pthreads-win32/">戳这里</a>，当然cocos2d-x帮我们包含进引擎了。</p>

<!-- more -->


<p><strong>1.1.头文件</strong></p>

<p>pthread.h放在\cocos2d-x目录\cocos2dx\platform\third_party\win32\pthread\下，右键项目→属性→配置属性→C/C++→附加包含目录添加如下，这里要注意附加包含目录是只包含当前目录下的文件，而不会包含该目录下子目录。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131104085049640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="添加包含目录" /><br></br></div>


<p><strong>1.2.库文件</strong></p>

<p>一样的，右键项目→属性→配置属性→链接器→输入→附加依赖项，添加pthreadVCE2.lib即可。v2.2.0会自动包含，这步可省。</p>

<h3>2.pthread库</h3>

<p><strong>2.1.主要功能</strong></p>

<p>pthread库包含了四大部分功能：</p>

<p><em>（1）Thread Management：线程管理。</em>提供了线程的创建，删除，结束等功能，也包含了对线程属性的修改和设置。</p>

<p><em>（2）Mutexex：互斥对象。</em>用于处理同步机制。提供了创建，销毁，加锁，解锁等功能，也包含了对互斥对象属性的修改和设置。</p>

<p><em>（3）Condition variables：条件变量。</em>提供了基于程序员提供条件的进程间通讯互斥锁的操作，包含了对其属性的修改和设置。</p>

<p><em>（4）Synchronization：同步相关。</em>提供了操作读写锁等功能。</p>

<p><strong>2.2.命名规则</strong></p>

<div align="center"><img src="http://img.blog.csdn.net/20131104102146609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="命名规则" /><br></br></div>


<h3>3.线程和互斥对象</h3>

<p>我们这里主要了解线程和互斥对象，也是最常用到的。</p>

<p><strong>3.1.线程</strong></p>

<pre><code>//创建线程  
PTW32_DLLPORT int PTW32_CDECL pthread_create (pthread_t * tid,  
    const pthread_attr_t * attr,  
    void *(*start) (void *),  
    void *arg);  

//退出线程  
PTW32_DLLPORT void PTW32_CDECL pthread_exit (void *value_ptr);  

//取消执行线程  
PTW32_DLLPORT int PTW32_CDECL pthread_cancel (pthread_t thread);  

//删除线程  
PTW32_DLLPORT int PTW32_CDECL pthread_detach (pthread_t tid);  

//加入线程  
PTW32_DLLPORT int PTW32_CDECL pthread_join (pthread_t thread,  
    void **value_ptr);  

//初始化线程属性  
PTW32_DLLPORT int PTW32_CDECL pthread_attr_init (pthread_attr_t * attr);  

//清理线程属性  
PTW32_DLLPORT int PTW32_CDECL pthread_attr_destroy (pthread_attr_t * attr);  
</code></pre>

<p><strong>3.2.互斥对象</strong></p>

<pre><code>//初始化mutex  
PTW32_DLLPORT int PTW32_CDECL pthread_mutex_init (pthread_mutex_t * mutex,  
    const pthread_mutexattr_t * attr);  

//销毁mutex，要注意如果是new的指针，需要手动释放，pthread_mutex_destroy并不会帮你释放  
PTW32_DLLPORT int PTW32_CDECL pthread_mutex_destroy (pthread_mutex_t * mutex);  

//加锁  
PTW32_DLLPORT int PTW32_CDECL pthread_mutex_lock (pthread_mutex_t * mutex);  

//尝试加锁  
PTW32_DLLPORT int PTW32_CDECL pthread_mutex_trylock (pthread_mutex_t * mutex);  

//解锁  
PTW32_DLLPORT int PTW32_CDECL pthread_mutex_unlock (pthread_mutex_t * mutex);  
</code></pre>

<p>要注意的是mutex变量必须要被声明为pthread_mutex_t类型，且在使用前必须要被初始化，初始化有2种方式：</p>

<p><em>（1）静态初始化</em></p>

<pre><code>pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER;  
</code></pre>

<p><em>（2）动态初始化</em></p>

<pre><code>pthread_mutex_init();  
</code></pre>

<h3>4.注意</h3>

<p>cocos2d-x使用多线程应注意的问题（来自官方文档）：</p>

<p><em>（1）不能调用涉及到CCObject::retain(), CCObject::release() 或者 CCObject::autorelease()的函数，因为CCAutoreleasePool不是线程安全的。因为cocos2d-x框架中无处不在使用CCAutoreleasePool，所以建议不要在新线程中调用cocos2d-x的API。</em></p>

<p><em>（2）如果要在新线程中加载资源，那么可以使用CCTextureCache::addImageAsync()。</em></p>

<p><em>（3）pthread_cond_wait()看起来有个bug，首次wait会失败，但是之后又会工作的很好。</em></p>

<p><em>（4）OpenGL context也不是线程安全。</em><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/11/04/play-cocos2dx-21/'><a href="http://start530.github.io/blog/2013/11/04/play-cocos2dx-21/">http://start530.github.io/blog/2013/11/04/play-cocos2dx-21/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十】从CCObject看cocos2d-x的内存管理机制]]></title>
    <link href="http://start530.github.io/blog/2013/10/31/play-cocos2dx-20/"/>
    <updated>2013-10-31T18:13:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/31/play-cocos2dx-20</id>
    <content type="html"><![CDATA[<p>再看CCObject，剔除上节的拷贝相关，以及Lua脚本相关的属性和方法后，CCObject还剩下什么？</p>

<h3>1.剩下什么？</h3>

<p>可以看到整个CCObject就是围绕着m_uReference和m_uAutoReleaseCount在转。这两个变量的解释如下。所以CCObject剩下的其实就是对内存的管理。</p>

<!-- more -->


<pre><code>CCObject::CCObject(void)//构造函数  
: m_nLuaID(0)  
, m_uReference(1) //引用计数，初始为1，当引用计数=0，自动释放该对象  
, m_uAutoReleaseCount(0)//自动释放对象计数，如果是手动new的，则为0，如果autoRelease的，则在AutoreleasePool会+1  
                    //这里是保护成员，所以CCAutoreleasePool被声明为友元类  
{  
    static unsigned int uObjectCount = 0;//静态成员，对象的计数，只增不减，用于标识唯一一个对象实例  
    m_uID = ++uObjectCount;                
}  

CCObject::~CCObject(void)  
{  
    if (m_uAutoReleaseCount &gt; 0)//如果是自动管理，则在PoolManager中删除  
    {  
        CCPoolManager::sharedPoolManager()-&gt;removeObject(this);  
    }  

    // if the object is referenced by Lua engine, remove it  
    if (m_nLuaID)  
    {  
        CCScriptEngineManager::sharedManager()-&gt;getScriptEngine()-&gt;removeScriptObjectByCCObject(this);  
    }  
    else  
    {  
        CCScriptEngineProtocol* pEngine = CCScriptEngineManager::sharedManager()-&gt;getScriptEngine();  
        if (pEngine != NULL &amp;&amp; pEngine-&gt;getScriptType() == kScriptTypeJavascript)  
        {  
            pEngine-&gt;removeScriptObjectByCCObject(this);  
        }  
    }  
}  

void CCObject::release(void)//引用计数-1，如果引用计数=0，释放对象  
{  
    CCAssert(m_uReference &gt; 0, "reference count should greater than 0");  
    --m_uReference;  

    if (m_uReference == 0)  
    {  
        delete this;  
    }  
}  

void CCObject::retain(void)//引用计数+1,防止被对象释放  
{  
    CCAssert(m_uReference &gt; 0, "reference count should greater than 0");  

    ++m_uReference;  
}  

CCObject* CCObject::autorelease(void)//对象加入PoolManager，自动管理  
{  
    CCPoolManager::sharedPoolManager()-&gt;addObject(this);  
    return this;  
}  

bool CCObject::isSingleReference(void) const //返回是否唯一引用  
{  
    return m_uReference == 1;  
}  

unsigned int CCObject::retainCount(void) const  //返回引用计数  
{  
    return m_uReference;  
}  

bool CCObject::isEqual(const CCObject *pObject) //判断对象是否相等  
{  
    return this == pObject;  
}  

void CCObject::acceptVisitor(CCDataVisitor &amp;visitor) //辅助对象执行动作  
{  
    visitor.visitObject(this);  
}  
</code></pre>

<h3>2.内存管理</h3>

<p>从CCObject可以看出，内存的管理方式有两种：手动管理和自动管理。</p>

<p><strong>2.1.手动内存管理</strong></p>

<p>想必从Java转到C++的朋友可能很受不了C++再申请完内存后还要手动释放，就像我从C++转Java时也同样很不习惯竟然不用管理内存，老是害怕会不小心让系统给销毁了。CCObject的成员变量m_uAutoReleaseCount标识了是手动管理还是自动管理。如果执行以下操作：</p>

<pre><code>CCObject* obj=new CCObject();//m_uAutoReleaseCount=0,m_uReference=1  
</code></pre>

<p>从析构函数可以看到，析构函数是不对所有手动进行申请的变量进行内存释放（必须m_uAutoReleaseCount>0）。那么这时得手动释放：</p>

<pre><code>obj-&gt;release();//m_uReference-1后为0，执行delete this;  
</code></pre>

<p>所以，new和release是好基友！而手动内存管理一般不再使用retain。</p>

<p><strong>2.2.自动内存管理</strong></p>

<p>如果需要进行内存的自动管理，那要怎么做呢？</p>

<pre><code>CCObject* obj=new CCObject();//m_uAutoReleaseCount=0,m_uReference=1  
obj-&gt;autorelease();//m_uAutoReleaseCount=1,m_uReference=1  
</code></pre>

<p>好了，什么都不用做，obj自生自灭了。
如果我们需要随时用到obj，而不愿意让它在我们不知情的情况下被释放，那么使用：</p>

<pre><code>obj-&gt;retain();//m_uAutoReleaseCount=1,m_uReference=2  
</code></pre>

<p>当不再需要它的时候，使用：</p>

<pre><code>obj-&gt;release();//m_uAutoReleaseCount=1,m_uReference=1  
</code></pre>

<p>又恢复回去了，所以，retain和release是好基友，一般在自动内存管理使用。</p>

<p>这里只是大概写一下如何使用new，autorelease，retain和release，至于内存管理的实现网上的代码解析很多，发现自己没办法深入浅出地写出来，所以还是放弃再写一回注释了，原理可以这么理解：Cocos2d-x提供了一个内存管理器类CCPoolManager，它包含了一个CCArray容器m_pReleasePoolStack，这个容器用来存放一些容器管理类CCAutoreleasePool的实例对象。需要自动进行内存释放的CCObject实例对象会把其指针存放在容器管理类CCAutoreleasePool的实例对象中的m_pManagedObjectArray容器里。所有存在其中的CCObject实例对象在进行释放操作时通过使用计数器来进行判断在何时真正释放内存，游戏在每一帧结束时都会对autorelease对象进行释放。</p>

<p><strong>2.3.一个疑问</strong></p>

<p>平时我们可能会这么用：</p>

<pre><code>//CTestLayer.h  
class CTestLayer : public cocos2d::CCLayer  
{  
public:  
    virtual bool init();  

    CREATE_FUNC(CTestLayer);  

    virtual void update(float delta);  

private:  
    CCSprite* background;  
};  

//CTestLayer.cpp  
bool CTestLayer::init()  
{  
    if ( !CCLayer::init() )  
    {  
        return false;  
    }  
    background=CCSprite::create("background.png");  
    this-&gt;addChild(background);  
    this-&gt;scheduleUpdate();  
    return true;  
}  

void update(float delta)  
{  
    background-&gt;setPositionY(background-&gt;getPositionY()-0.1);  
}  
</code></pre>

<p>background是create出来的，可以知道它是调用了autorelease，属于自动管理对象，而且我们又没有进行retain操作，按道理在执行update的时候background已经是要被销毁的，但是实际并没有。问题就出在这一句：</p>

<pre><code>this-&gt;addChild(background);  
</code></pre>

<p>至于为什么，大家翻一下addChild实现源码就知道啦~</p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/10/31/play-cocos2dx-20/'>http://start530.github.io/blog/2013/10/31/play-cocos2dx-20/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十九】从CCObject看cocos2d-x的拷贝机制]]></title>
    <link href="http://start530.github.io/blog/2013/10/30/play-cocos2dx-19/"/>
    <updated>2013-10-30T18:08:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/30/play-cocos2dx-19</id>
    <content type="html"><![CDATA[<p>CCObject在之前的文章中出现了N次，它扮演了一个老祖宗的角色，但是它到底是做什么的？先从它看看cocos2d-x的拷贝机制吧。</p>

<h3>1.CCCopying</h3>

<p>CCObject从CCCopying继承而来，而CCCopying拥有唯一的一个成员虚函数copyWithZone，这个函数可以认为是拷贝的一个协议，所有继承了CCObject并且需要实现拷贝功能的子类都可以通过它来实现，它的源码很简单，就是一个未实现的断言。CCZone是神马？只是封装了一个CCObject对象指针而已。</p>

<!-- more -->


<pre><code>CCObject* CCCopying::copyWithZone(CCZone *pZone)  
{  
    CC_UNUSED_PARAM(pZone);  
    CCAssert(0, "not implement");  
    return 0;  
}  
</code></pre>

<h3>2.CCObject的子类拷贝问题</h3>

<p>再看看CCObject中copy的实现，是的，直接调用了copyWithZone，所以子类在处理拷贝问题时只需要对copyWithZone进行实现，使用时调用copy即可。</p>

<pre><code>CCObject* CCObject::copy()  
{  
    return copyWithZone(0);  
}  
</code></pre>

<h3>3.CCArray示例</h3>

<p>这里以CCArray的拷贝为例，CCArray继承于CCObject，如上所说，我们只需要实现copyWithZone，然后在拷贝时调用copy即可实现CCArray的拷贝。</p>

<p><strong>3.1.CCArray拷贝时调用copy</strong></p>

<pre><code>CCArray* CCArray::createWithArray(CCArray* otherArray)  
{  
    CCArray* pRet = (CCArray*)otherArray-&gt;copy();//copy调用了copyWithZone  
    pRet-&gt;autorelease();  
    return pRet;  
}  
</code></pre>

<p><strong>3.2.copyWithZone的实现</strong></p>

<p>可以看出CCArray采用的是深拷贝的方式。</p>

<pre><code>CCObject* CCArray::copyWithZone(CCZone* pZone)  
{  
    CCAssert(pZone == NULL, "CCArray should not be inherited.");  
    CCArray* pArray = new CCArray();  //new一个存放拷贝的空间  
    pArray-&gt;initWithCapacity(this-&gt;data-&gt;num &gt; 0 ? this-&gt;data-&gt;num : 1);//初始化一样的长度  

    CCObject* pObj = NULL;  
    CCObject* pTmpObj = NULL;  
    CCARRAY_FOREACH(this, pObj)//遍历CCArray成员  
    {  
        pTmpObj = pObj-&gt;copy();//逐个拷贝  
        pArray-&gt;addObject(pTmpObj);//添加到新拷贝pArray中  
        pTmpObj-&gt;release();  
    }  
    return pArray;//返回拷贝  
}  
</code></pre>

<h3>4.深拷贝和浅拷贝</h3>

<p>其实不单是CCArray，cocos2d-x采用的都是深拷贝的方式，深拷贝和浅拷贝的概念和详解请移步<a href="http://blog.csdn.net/jackystudio/article/details/11553117">这里</a>。它们的区别在于当前对象是否包含了对其他资源的引用。在拷贝机制上采用深拷贝的方式，大大方便了我们对内存的管理，避免因资源的释放导致引用异常。这对于平时在进行一些自定义子类的拷贝处理上还是很有指导意义的。<p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/10/30/play-cocos2dx-19/'><a href="http://start530.github.io/blog/2013/10/30/play-cocos2dx-19/">http://start530.github.io/blog/2013/10/30/play-cocos2dx-19/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十八】仿《中国好学霸》文字拖拽和定位]]></title>
    <link href="http://start530.github.io/blog/2013/10/28/play-cocos2dx-18/"/>
    <updated>2013-10-28T18:00:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/28/play-cocos2dx-18</id>
    <content type="html"><![CDATA[<p>现在各种猜成语猜歌名好学霸之类的游戏火的一塌糊涂。本节就介绍下文字的拖拽和定位。</p>

<h3>1.基本原理</h3>

<p>其实这只是精灵的简单拖拽和坐标的识别而已。当触摸点在精灵的范围内，精灵可以感应拖动，当触摸结束进行位置判断，如果在有效范围内就进行自动定位。</p>

<!-- more -->


<h3>2.实现</h3>

<p><strong>2.1.背景加入和文字精灵的加入</strong>
这里是采用<a href="http://blog.csdn.net/jackystudio/article/details/13014883">这一节</a>所述方式添加中文。</p>

<pre><code>bool AutoSet::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCLayer::init());  
        CCSize visiableSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  

        CCSprite* background=CCSprite::create("AutoSetBk.jpg");  
        background-&gt;setPosition(ccp(visiableSize.width/2,visiableSize.height/2));  
        this-&gt;addChild(background);//添加背景  

        //利用CCDictionary来读取xml  
        CCDictionary* chnStrings = CCDictionary::createWithContentsOfFile("CHN_Strings.xml");  
        const char *hao = ((CCString*)chnStrings-&gt;objectForKey("hao"))-&gt;m_sString.c_str();   

        text=CCLabelTTF::create(hao,"Arial",50);  
        text-&gt;setPosition(ccp(120,160));  
        text-&gt;setColor(ccc3(0,0,0));  
        this-&gt;addChild(text);//添加文本  

        this-&gt;setTouchEnabled(true);//设置触摸可用  

        bRet=true;  
    } while (0);  
    return bRet;  
}  
</code></pre>

<p><strong>2.2.触摸的实现和拖拽的定位</strong></p>

<p>因为3.0版本cocos2d-x的触摸实现已经变更了，所以这里不再赘述，3.0之前的触摸的原理和实现具体可以参见<a href="http://blog.csdn.net/jackystudio/article/details/11860007">这一节</a>。</p>

<p><strong>2.2.1注册触摸事件</strong></p>

<pre><code>void AutoSet::registerWithTouchDispatcher(void)  
{  
    CCDirector *pDirector=CCDirector::sharedDirector();    
    pDirector-&gt;getTouchDispatcher()-&gt;addTargetedDelegate(this,0,true);//单点触摸  
}  
</code></pre>

<p><strong>2.2.2.触摸开始</strong></p>

<pre><code>bool AutoSet::ccTouchBegan(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)  
{  
    return true;//返回true表示接收触摸事件  
}  
</code></pre>

<p><strong>2.2.3.触摸过程</strong></p>

<pre><code>void AutoSet::ccTouchMoved(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)  
{  
    CCPoint beginPoint = pTouch-&gt;getLocationInView();  //获取触摸位置  
    beginPoint = CCDirector::sharedDirector()-&gt;convertToGL(beginPoint);//坐标转换  
    CCPoint pt=text-&gt;getPosition();  
    CCRect rect=CCRectMake(pt.x-30,pt.y-30,60,60);  
    if (rect.containsPoint(beginPoint))//判断触摸点是否在文字上  
    {  
        CCPoint endPoint=pTouch-&gt;getPreviousLocationInView();//获取触摸的前一个位置    
        endPoint=CCDirector::sharedDirector()-&gt;convertToGL(endPoint);     

        CCPoint offSet =ccpSub(beginPoint,endPoint);//获取offset    
        CCPoint toPoint=ccpAdd(text-&gt;getPosition(),offSet); //获取真正移动位置  
        text-&gt;setPosition(toPoint);//移动文字  
    }  
}  
</code></pre>

<p><strong>2.2.4.触摸结束</strong></p>

<pre><code>void AutoSet::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)  
{  
    CCPoint lastPoint = pTouch-&gt;getLocationInView();//获取触摸结束点位置  
    lastPoint = CCDirector::sharedDirector()-&gt;convertToGL(lastPoint);  
    CCRect rect=CCRectMake(330,130,60,60);  
    CCMoveTo* moveto;  
    if (!rect.containsPoint(lastPoint))//如果未在指定区域，还原到初始位置  
    {  
        moveto=CCMoveTo::create(0.1f,ccp(120,160));  
    }  
    else//如果在指定区域，移动到该区域中心  
    {  
        moveto=CCMoveTo::create(0.1f,ccp(360,160));  
    }  
    text-&gt;runAction(moveto);  
}  
</code></pre>

<h3>3.效果图</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131209083021671" alt="" border="0" title="效果" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6463261">源码下载</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/10/28/play-cocos2dx-18/'><a href="http://start530.github.io/blog/2013/10/28/play-cocos2dx-18/">http://start530.github.io/blog/2013/10/28/play-cocos2dx-18/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十七】cocos2d-x中文显示]]></title>
    <link href="http://start530.github.io/blog/2013/10/25/play-cocos2dx-17/"/>
    <updated>2013-10-25T16:53:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/25/play-cocos2dx-17</id>
    <content type="html"><![CDATA[<p>cocos2d-x的中文显示其实就是一个UTF-8编码在作怪而已，一种简单的方法就是把文本保存为UTF-8编码即可（注意不是UTF-8 + BOM），建议使用UE，Sublime Text或者EditPlus之类的本文编辑器。这里介绍另一种方法：通过读取xml文件显示中文，这种方法更利于软件的国际化，demo顺便实现了中英文切换。</p>

<!-- more -->


<h3>1.xml文件</h3>

<p>先写好一个xml文件（CHN_Strings.xml）。注意记得要以UTF-8编码保存。格式很简单，一个key对应一个string的键值对。如下：</p>

<pre><code>&lt;dict&gt;  
    &lt;key&gt;language&lt;/key&gt;  
    &lt;string&gt;English&lt;/string&gt;  
    &lt;key&gt;username&lt;/key&gt;  
    &lt;string&gt;偶尔e网事&lt;/string&gt;  
    &lt;key&gt;website&lt;/key&gt;  
    &lt;string&gt;CSDN博客：http://blog.csdn.net/jackystudio&lt;/string&gt;  
&lt;/dict&gt;  
</code></pre>

<h3>2.通过CCDictionary读取xml</h3>

<p>CCDictionary是利用哈希表算法来进行CCObject管理的一个类。这里不再对它的API及内部实现进行说明了。</p>

<p><strong>2.1.创建词典类实例</strong></p>

<pre><code>CCDictionary *chnStrings = CCDictionary::createWithContentsOfFile("CHN_Strings.xml");  
</code></pre>

<p><strong>2.2.通过键（key）获取值（value）</strong></p>

<pre><code>const char *username = ((CCString*)chnStrings-&gt;objectForKey("username"))-&gt;m_sString.c_str();  
</code></pre>

<p><strong>2.3.使用value</strong></p>

<pre><code>CCLabelTTF* pLabel = CCLabelTTF::create(username, "Arial", 24);//这里创建一个文本  
pLabel-&gt;setPosition(ccp(origin.x + visibleSize.width/2,origin.y + visibleSize.height - pLabel-&gt;getContentSize().height));  
this-&gt;addChild(pLabel, 1);  
</code></pre>

<h3>3.效果</h3>

<p>这里我用了2个xml，一个是中文，一个是英文，设置了一个菜单，点击即可调用不同的xml进行中英文的切换，效果如下图。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131209083141593" alt="" border="0" title="效果" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6442201">源码下载</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/10/25/play-cocos2dx-17/'><a href="http://start530.github.io/blog/2013/10/25/play-cocos2dx-17/">http://start530.github.io/blog/2013/10/25/play-cocos2dx-17/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十六】滚动字幕和公告]]></title>
    <link href="http://start530.github.io/blog/2013/10/24/play-cocos2dx-16/"/>
    <updated>2013-10-24T16:38:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/24/play-cocos2dx-16</id>
    <content type="html"><![CDATA[<p>滚动字幕和公告是游戏中经常使用到的元素，本文大致写一下实现方法，至于例子中具体的坐标值，请不要纠结。。。这和美工关系还是蛮大的。我PS技术太搓了。。。</p>

<h3>1.原理</h3>

<p>其实它们的实现都是简单的通过调用update来更新位置达到的移动效果，和背景滚动有点类似，一旦滚动结束就重置为起点，开始新的滚动。只是为了达到在某个区域内滚动而不至于超出这个区域，有时候会用一些前景图来做遮盖，所以这个时候其实字幕或者公告是有在后面滚动的，但是被遮住了，因此看起来就像是只在某个区域内滚动。以垂直字幕滚动为例说明，如下图。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131022090909406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="原理" /><br></br></div>


<h3>2.实现</h3>

<p>不要纠结以下各精灵的坐标位置：）</p>

<pre><code>bool CTestLayer::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCLayer::init());  

        CCSize visibleSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  
        CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;addSpriteFramesWithFile("ui_serverlist.plist");  

        //垂直滚动字幕  
        CCSprite* listbase=CCSprite::createWithSpriteFrame(CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;spriteFrameByName("login_listbase.png"));//bottom底图  
        listbase-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2+10));  
        this-&gt;addChild(listbase);  
        text1=CCLabelTTF::create("1.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n2.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n3.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n4.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!","Arial",12);//middle文本  
        text1-&gt;setHorizontalAlignment(kCCTextAlignmentLeft);//左对齐  
        text1-&gt;setAnchorPoint(ccp(0.5,1));  
        text1-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2-55));  
        this-&gt;addChild(text1);  
        CCSprite* fg=CCSprite::create("fg.png");//top前景  
        fg-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2));  
        this-&gt;addChild(fg);  

        //水平滚动公告  
        CCSprite* textbase=CCSprite::createWithSpriteFrame(CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;spriteFrameByName("login_textbase.png"));  
        textbase-&gt;setPosition(ccp(visibleSize.width/2,50));  
        textbase-&gt;setScaleX(2.5f);  
        this-&gt;addChild(textbase);  
        text2=CCLabelTTF::create("Hi! Welcome to JackyStudio,My Blog is blog.csdn.net/jackystudio!","Arial",12);  
        text2-&gt;setPosition(ccp(visibleSize.width+text2-&gt;getContentSize().width/2,50));  
        text2-&gt;setColor(ccc3(255,0,0));//红色字体  
        this-&gt;addChild(text2);  

        this-&gt;scheduleUpdate();//执行更新  

        bRet=true;  
    } while (0);  
    return bRet;  
}  

void CTestLayer::update(float delta)  
{  
    CCSize visibleSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  

    int newY=text1-&gt;getPositionY()+1;  
    if (newY==500)//如果滚动到这个位置，重置  
    {  
        newY=visibleSize.height/2-55;  
    }  
    text1-&gt;setPositionY(newY);  

    int newX=text2-&gt;getPositionX()-1;  
    if (newX&lt;=-text2-&gt;getContentSize().width/2)//如果滚动到这个位置，重置  
    {  
        newX=visibleSize.width+text2-&gt;getContentSize().width/2;  
    }  
    text2-&gt;setPositionX(newX);  
}  
</code></pre>

<h3>3.效果</h3>

<p>这个效果有点小bug，就是文字覆盖到边框上了，这是因为没有把边框做在top层上导致的，实际使用注意这个问题即可。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131209083133296" alt="" border="0" title="字幕滚动和公告" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6434549">源码下载</a><p class='post-footer'>&nbsp;原文地址：<a href='http://start530.github.io/blog/2013/10/24/play-cocos2dx-16/'><a href="http://start530.github.io/blog/2013/10/24/play-cocos2dx-16/">http://start530.github.io/blog/2013/10/24/play-cocos2dx-16/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
</feed>
