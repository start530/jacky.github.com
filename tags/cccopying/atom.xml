<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: CCCopying | Jacky's Blog]]></title>
  <link href="http://www.fusijie.com/tags/cccopying/atom.xml" rel="self"/>
  <link href="http://www.fusijie.com/"/>
  <updated>2014-05-06T22:14:16+08:00</updated>
  <id>http://www.fusijie.com/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十九】从CCObject看cocos2d-x的拷贝机制]]></title>
    <link href="http://www.fusijie.com/blog/2013/10/30/play-cocos2dx-19/"/>
    <updated>2013-10-30T18:08:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/10/30/play-cocos2dx-19</id>
    <content type="html"><![CDATA[<p>CCObject在之前的文章中出现了N次，它扮演了一个老祖宗的角色，但是它到底是做什么的？先从它看看cocos2d-x的拷贝机制吧。</p>

<h3>1.CCCopying</h3>

<p>CCObject从CCCopying继承而来，而CCCopying拥有唯一的一个成员虚函数copyWithZone，这个函数可以认为是拷贝的一个协议，所有继承了CCObject并且需要实现拷贝功能的子类都可以通过它来实现，它的源码很简单，就是一个未实现的断言。CCZone是神马？只是封装了一个CCObject对象指针而已。</p>

<!-- more -->


<pre><code>CCObject* CCCopying::copyWithZone(CCZone *pZone)  
{  
    CC_UNUSED_PARAM(pZone);  
    CCAssert(0, "not implement");  
    return 0;  
}  
</code></pre>

<h3>2.CCObject的子类拷贝问题</h3>

<p>再看看CCObject中copy的实现，是的，直接调用了copyWithZone，所以子类在处理拷贝问题时只需要对copyWithZone进行实现，使用时调用copy即可。</p>

<pre><code>CCObject* CCObject::copy()  
{  
    return copyWithZone(0);  
}  
</code></pre>

<h3>3.CCArray示例</h3>

<p>这里以CCArray的拷贝为例，CCArray继承于CCObject，如上所说，我们只需要实现copyWithZone，然后在拷贝时调用copy即可实现CCArray的拷贝。</p>

<p><strong>3.1.CCArray拷贝时调用copy</strong></p>

<pre><code>CCArray* CCArray::createWithArray(CCArray* otherArray)  
{  
    CCArray* pRet = (CCArray*)otherArray-&gt;copy();//copy调用了copyWithZone  
    pRet-&gt;autorelease();  
    return pRet;  
}  
</code></pre>

<p><strong>3.2.copyWithZone的实现</strong></p>

<p>可以看出CCArray采用的是深拷贝的方式。</p>

<pre><code>CCObject* CCArray::copyWithZone(CCZone* pZone)  
{  
    CCAssert(pZone == NULL, "CCArray should not be inherited.");  
    CCArray* pArray = new CCArray();  //new一个存放拷贝的空间  
    pArray-&gt;initWithCapacity(this-&gt;data-&gt;num &gt; 0 ? this-&gt;data-&gt;num : 1);//初始化一样的长度  

    CCObject* pObj = NULL;  
    CCObject* pTmpObj = NULL;  
    CCARRAY_FOREACH(this, pObj)//遍历CCArray成员  
    {  
        pTmpObj = pObj-&gt;copy();//逐个拷贝  
        pArray-&gt;addObject(pTmpObj);//添加到新拷贝pArray中  
        pTmpObj-&gt;release();  
    }  
    return pArray;//返回拷贝  
}  
</code></pre>

<h3>4.深拷贝和浅拷贝</h3>

<p>其实不单是CCArray，cocos2d-x采用的都是深拷贝的方式，深拷贝和浅拷贝的概念和详解请移步<a href="http://blog.csdn.net/jackystudio/article/details/11553117">这里</a>。它们的区别在于当前对象是否包含了对其他资源的引用。在拷贝机制上采用深拷贝的方式，大大方便了我们对内存的管理，避免因资源的释放导致引用异常。这对于平时在进行一些自定义子类的拷贝处理上还是很有指导意义的。</p>
]]></content>
  </entry>
  
</feed>
