<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Item | Jacky's Blog]]></title>
  <link href="http://www.fusijie.com/tags/item/atom.xml" rel="self"/>
  <link href="http://www.fusijie.com/"/>
  <updated>2014-05-06T22:14:16+08:00</updated>
  <id>http://www.fusijie.com/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十三】CCMenu的布局]]></title>
    <link href="http://www.fusijie.com/blog/2013/10/21/play-cocos2dx-13/"/>
    <updated>2013-10-21T10:23:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/10/21/play-cocos2dx-13</id>
    <content type="html"><![CDATA[<p>前两天写个游戏，发现CCMenu的布局还是比较有意思的，这里总结一下，以便后用。</p>

<h3>1.概况</h3>

<p>CCMenu是cocos2d-x的菜单类，但它本身并不具备菜单具体属性，而是作为一个父节点，将一些具体类型的菜单添加进去来达到菜单目的的。我们正常会这么使用它：先创建子菜单项CCMenuItem，然后将子菜单项CCMenuItem加入菜单CCMenu，最后把CCMenu加入当前层CCLayer。</p>

<p>如果直接在层中添加CCMenuItem会怎样？其实显示也是会正常，但是无法响应回调，因为CCMenu是继承至CCLayer，也就继承了触摸的相关事件，而CCMenuItem只是从CCNode继承而来，并不响应触摸，因此无法调用回调函数。</p>

<!-- more -->


<h3>2.菜单CCMenu</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131016104259593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCMenu" /><br></br></div>


<h3>3.子菜单项CCMenuItem</h3>

<p>子菜单项可以是用精灵，图片，标签文本，或者开关都可以，这里不具体解释。请看：</p>

<div align="center"><img src="http://img.blog.csdn.net/20131016091825390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCMenuItem" /><br></br></div>


<h3>4.锚点</h3>

<p>CCMenu继承于CCLayer，所以它具有忽略锚点的属性。而CCMenuItem的锚点是正常的(0.5,0.5)。</p>

<p>（1）看一下自带的HelloCpp这个工程，在添加退出按钮的时候，是不是有这么一句：</p>

<pre><code>pMenu-&gt;setPosition(CCPointZero);
</code></pre>

<p>这句话的作用就是把Menu放在原点的位置，假设Menu有大小，那就是下图1。</p>

<p>（2）现在再做点改变，把MenuItem指定的位置去掉，也就是让它默认在(0,0)位置上。</p>

<pre><code>//pCloseItem-&gt;setPosition(ccp(origin.x + visibleSize.width - pCloseItem-&gt;getContentSize().width/2 ,origin.y + pCloseItem-&gt;getContentSize().height/2));  
</code></pre>

<p>那么再看一下效果，如图2，抽象出来就是图3，因为CCMenuItem的锚点是(0.5,0.5)。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131016101236812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p>（3）所以现在可以理解HelloCpp中为什么定义的是CCMenuItem的位置，而不是定义CCMenu的位置了吧。CCMenu包含了多个子菜单项，每个子菜单的位置都不一样，如果定义了CCMenu的位置，那它作为父节点会影响到所有的子菜单的位置，因此我们一般把它设置在原点处，然后通过设置子菜单的位置（也就是相对父节点的偏移量）来定位整个菜单。</p>

<h3>5.多子菜单的排列</h3>

<p><em>（1）横向排列，纵向排列，可以指定间隔</em></p>

<pre><code>CCMenuItemImage *pCloseItem1 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
CCMenuItemImage *pCloseItem2 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  

CCMenu* pMenu = CCMenu::create(pCloseItem1,pCloseItem2,NULL);  
pMenu-&gt;alignItemsHorizontally();//默认间隔是kDefaultPadding=5  
//pMenu-&gt;alignItemsHorizontallyWithPadding(20);//指定间隔  
//pMenu-&gt;alignItemsVertically();//默认间隔也是kDefaultPadding=5  
//pMenu-&gt;alignItemsVerticallyWithPadding(20);//指定间隔  
this-&gt;addChild(pMenu, 1);  
</code></pre>

<div align="center"><img src="http://img.blog.csdn.net/20131016102601734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p><em>（2）按行排列，按列排列，不能指定间隔，只能自己实现。希望下一版本有这个功能。</em></p>

<pre><code>CCMenuItemImage *pCloseItem1 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
...  
CCMenuItemImage *pCloseItem6 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
CCMenu* pMenu = CCMenu::create(pCloseItem1,pCloseItem2,pCloseItem3,pCloseItem4,pCloseItem5,pCloseItem6,NULL);  
pMenu-&gt;alignItemsInRows(3,2,1,NULL);  
//pMenu-&gt;alignItemsInColumns(3,2,1,NULL);  
this-&gt;addChild(pMenu, 1);  
</code></pre>

<div align="center"><img src="http://img.blog.csdn.net/20131016103617078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>

]]></content>
  </entry>
  
</feed>
