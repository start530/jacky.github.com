<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: cocos2d-x | Star's Blog]]></title>
  <link href="http://start530.github.io/tags/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://start530.github.io/"/>
  <updated>2014-05-06T22:31:52+08:00</updated>
  <id>http://start530.github.io/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十九】利用CCClipingNode做游戏遮罩]]></title>
    <link href="http://start530.github.io/blog/2013/12/06/play-cocos2dx-29/"/>
    <updated>2013-12-06T10:41:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/12/06/play-cocos2dx-29</id>
    <content type="html"><![CDATA[<p>新手引导是游戏中必备的（除了奇葩的MT用一段动画开始），也是玩家对游戏的第一印象，重要性不言而喻。一般采用的遮罩的形式来突出引导重点，同时屏蔽其他功能。这里简单的介绍一下游戏遮罩的实现，并给出一个示例。</p>

<h3>1.CCClipingNode</h3>

<p>CCClipingNode是一个可裁剪节点，简单理解：</p>

<p><em>（1）首先它是一个节点，继承于CCNode，所以它可以像普通节点一样放入CCLayer，CCScene，CCNode中。</em></p>

<p><em>（2）作为节点，它就可以用作容器，承载其他节点和精灵。我把它叫底板。</em></p>

<p><em>（3）如果想要对一个节点进行裁剪，那需要给出裁剪的部分，这个裁剪区域，我把它叫模版。</em></p>

<!-- more -->


<p>所以CCClipingNode裁剪节点在组成上=底板+模版，而在显示上=底板-模版。不知道这样解释会不会好理解一点。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206093955500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCClipingNode" /><br></br></div>


<h3>2.API</h3>

<p>CCClipingNode的使用还是比较简单的，至于显示底板还是模版，alpha值的设定，这些也不好说清楚，自己多试几次就知道是什么意思该怎么用了。</p>

<p>``` cpp CCClipingNode API</p>

<pre><code>//不带模版地创建一个裁剪节点  
static CCClippingNode* create();  

//使用一个节点作为模版创建裁剪节点  
static CCClippingNode* create(CCNode *pStencil);  

//不带模版地初始化一个裁剪节点  
virtual bool init();  

//使用一个节点作为模版初始化裁剪节点  
virtual bool init(CCNode *pStencil);  

//设置/获取模版，注意模版需要retain！  
CCNode* getStencil() const;  
void setStencil(CCNode *pStencil);  

//设置alpha值（0~1），这个很重要，裁剪是按像素抠图的，所以只有大于这个alpha值的模版像素才会被画出来  
//默认是1，也就是完全裁剪。  
GLfloat getAlphaThreshold() const;  
void setAlphaThreshold(GLfloat fAlphaThreshold);  

//默认是false，用于设置显示底板还是模版  
bool isInverted() const;  
void setInverted(bool bInverted);  
</code></pre>

<p>```</p>

<h3>3.示例</h3>

<p>在init中实现：</p>

<p>``` cpp CCClipingNode的使用</p>

<pre><code>CCSize visibleSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  

CCSprite* background = CCSprite::create("HelloWorld.png");//创建背景  
background-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2));  
this-&gt;addChild(background,kTagBackground);  

clip=CCClippingNode::create();//创建裁剪节点，成员变量  
clip-&gt;setInverted(true);//设置底板可见  
clip-&gt;setAlphaThreshold(0.0f);//设置alpha为0  
this-&gt;addChild(clip,kTagClipNode);//添加裁剪节点  

CCLayerColor* back=CCLayerColor::create(ccc4(0,0,0,200));  
clip-&gt;addChild(back);//为裁剪节点添加一个黑色带透明（看起了是灰色）的底板  

//模版如果要在其他地方使用要记得retain！  

//第一种：以下模型是drawnode遮罩  
//CCDrawNode* front=CCDrawNode::create();  
//ccColor4F yellow = {1, 1, 0, 1};  
//CCPoint rect[4]={ccp(-30,30),ccp(30,30),ccp(30,-30),ccp(-30,-30)};  
//front-&gt;drawPolygon(rect, 4, yellow, 0, yellow);  
//front-&gt;setPosition(ccp(visibleSize.width/2, visibleSize.height/2));  
//clip-&gt;setStencil(front);  

//第二种：以下模型是带图像遮罩  
CCNode* nodef=CCNode::create();//创建模版  
CCSprite* close=CCSprite::create("CloseSelected.png");//这里使用的是close的那个图标，所以注意观察效果图2  
nodef-&gt;addChild(close);//在模版上添加精灵  
nodef-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2));  
clip-&gt;setStencil(nodef);//设置模版  

tip = CCSprite::create("tip.png");//一些引导提示  
tip-&gt;setScale(0.5f);  
tip-&gt;setRotation(60);  
tip-&gt;setPosition(ccp(visibleSize.width/2-70,visibleSize.height/2+50));  
this-&gt;addChild(tip,kTagTip);  

tip-&gt;runAction(CCRepeatForever::create(CCSequence::create(CCScaleBy::create(0.25f,0.95f),CCScaleTo::create(0.25f,0.5),NULL)));  

this-&gt;setTouchEnabled(true);//触摸有效，落点正确时移除裁剪节点和提示，相关处理请看源码  
</code></pre>

<p>```</p>

<h3>4.效果</h3>

<p>两种效果：</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206102326578" alt="" border="0" title="1" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131206102337937" alt="" border="0" title="2" /><br></br></div>


<h3>5.源码</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6667189">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十二】plist解析工具：Anti_TexturePacker]]></title>
    <link href="http://start530.github.io/blog/2013/10/19/play-cocos2dx-12/"/>
    <updated>2013-10-19T09:49:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/19/play-cocos2dx-12</id>
    <content type="html"><![CDATA[<p>之前拿了一些别人的图片素材，是用TexturePacker打包合成的，结果写程序的时候不知道每个合成前小png图的名字是什么，只能一个一个从plist文件中找，然后猜测对应的名字，再进行显示，如果不对，还要继续猜。。。坑爹啊，效率大大降低了，时间都耗在找图片名字上了。后来决定动手写一个解析plist的软件，就叫它Anti_TexturePacker吧。</p>

<p>Anti_TexurePacker软件基于VS 2008 MFC Dialog。</p>

<h3>1.PNG图的显示</h3>

<p>这个还好，VS2008提供了GDI+，所以可以直接用它显示。关键是屏幕尺寸有限，如果打包后的PNG图很大的话，不能直接显示，又懒得做滚动条，所以直接采用缩放的方式了。缩放比例较大的话，可能会出现捕获点计算不精确，不过效果还是不错的，没有尺寸限制。</p>

<!-- more -->


<pre><code>CDC* pDC =GetDC();  
Graphics graphics( pDC-&gt;m_hDC);  
Image image(m_PNGFileName.GetString(), FALSE);  
graphics.DrawImage(&amp;image,ORIGIN_DRAW_X,ORIGIN_DRAW_Y,(int)(m_RealWidth*m_ScaleRatio),(int)(m_RealHeight*m_ScaleRatio)); 
</code></pre>

<p>要注意PNG图的显示要放在OnPaint中执行，这样窗口进行重绘的时候才会保证PNG图的正常显示。</p>

<h3>2.plist文件的读取</h3>

<p>看一下plist的格式：</p>

<div align="center"><img src="http://start530.github.io/images/Blog/1.jpg" alt="" border="0" title="4" /><br></br></div>


<p>这样一看，就知道了标准的plist文件中，我们需要的是第7，10，14，20，23，27&hellip;行。抓出规律，读取到CStringArray。我没有采用xml的解析库，而是直接无耻的这么做了，用起来倒是没什么问题，但是不要学啊。。。</p>

<pre><code>    int i=1;
    int needName=7;
    int needConfig=10;
    int needrotate=14;
    if(!bFileExist)//如果文件存在且可读
    {
        return FALSE;
    }
    CString strline;
    FileContainer.RemoveAll();
    //将PlistFile文件数据读到FileContainer
    while(PlistFile.ReadString(strline))
    {
        if (i==needName)
        {
            FileContainer.Add(strline);
            needName+=13;
        }
        if (i==needConfig)
        {
            FileContainer.Add(strline);
            needConfig+=13;
        }
        if (i==needrotate)
        {
            FileContainer.Add(strline);
            needrotate+=13;
        }
        i++;
    }
    PlistFile.Close();
</code></pre>

<p>然后再解析出CCStringArray中的名字和对应的坐标，尺寸，是否旋转赋值到一个结构体（包含Name，Width，Height，OriginX，OriginY，isRotate）。创建一个CList来储存这些结构体。</p>

<pre><code>while(i&lt;iFileLines)
{
    strline = FileContainer.GetAt(i++);
    strline.TrimLeft();//删除左边的空格
    if (i%3==1)//第1行，储存名字
    {
        str=strline.Mid(5,strline.GetLength()-11);
        t_pngcfg.strName=str;
    }
    else if(i%3==2)//第2行，储存坐标和尺寸
    {
        CString strTemp;
        str=strline.Mid(10,strline.GetLength()-21);
        AfxExtractSubString(strTemp,str,0,',');
        t_pngcfg.originX=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,1,',');
        strTemp=strTemp.Left(strTemp.GetLength()-1);
        t_pngcfg.originY=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,2,',');
        strTemp=strTemp.Right(strTemp.GetLength()-1);
        t_pngcfg.width=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,3,',');
        t_pngcfg.height=_ttoi(strTemp);
    }
    else //第3行，存储旋转属性
    {
        str=strline.Mid(1,strline.GetLength()-3);
        if (str=="true")
        {
            t_pngcfg.isRotate=true;
        }
        else if (str=="false")
        {
            t_pngcfg.isRotate=false;
        }
        m_list.AddTail(t_pngcfg);
    }
}
</code></pre>

<p>因为plist文件最后还有一个metadata字段，所以后面进行遍历的时候要对CCList的个数减1。</p>

<h3>3.随鼠标移动的PNG图片名字的获取</h3>

<p>在OnMouseMove中进行处理显示。</p>

<pre><code>CPoint ptInPNG;  
ptInPNG.x=(point.x-ORIGIN_DRAW_X)/m_ScaleRatio;  
ptInPNG.y=(point.y-ORIGIN_DRAW_Y)/m_ScaleRatio;  

int count=m_plistFile.m_list.GetCount();  
for (int i=0;i&lt;count-1;i++)  
{  
    PNGCfg t_pngcfg=m_plistFile.m_list.GetAt(m_plistFile.m_list.FindIndex(i));  
    if (isPtInRect(ptInPNG,t_pngcfg))  
    {  
        showStastus(t_pngcfg.strName);  
    }  
}  
</code></pre>

<h3>4.单击PNG图拷贝名字到剪切板</h3>

<p>在OnLButtonDown中进行处理拷贝。</p>

<pre><code>if(OpenClipboard()) //首先打开一个剪切板，如果成功则返回非0值  
{
    HANDLE hClip;//声明一个句柄  
    char *pBuf;  
    EmptyClipboard();//置空这个剪切板，且得到剪切板的所有权  
    hClip=GlobalAlloc(GMEM_MOVEABLE,t_pngcfg.strName.GetLength()+1);  
    //申请锁定一块存放数据的内存区域  
    pBuf=(char *)GlobalLock(hClip);//得到指向内存区域的第一个字节指针  
    strcpy(pBuf,(char*)_bstr_t(t_pngcfg.strName.GetBuffer()));//将文本框的值拷贝到内存中  
    GlobalUnlock(hClip);//解除内存锁定  
    SetClipboardData(CF_TEXT,hClip);//设置数据到剪切板中  
    CloseClipboard();//关闭剪切板  
}  
</code></pre>

<h3>5.PNG图的裁剪和保存</h3>

<p>创建一个新的GDI+Bitmap对象，传入图像数据和大小，进行保存即可。</p>

<pre><code>Gdiplus::Rect rcImage(x, y, width, height);  
pWrapBitmap-&gt;LockBits(&amp;rcImage, Gdiplus::ImageLockModeRead, pWrapBitmap-&gt;GetPixelFormat(), &amp;bitmapData);  
pBitmap = new Gdiplus::Bitmap(bitmapData.Width, bitmapData.Height, bitmapData.Stride, PixelFormat32bppARGB, (BYTE*)bitmapData.Scan0);  
pWrapBitmap-&gt;UnlockBits(&amp;bitmapData);  
if (pngcfg.isRotate)  
{  
    pBitmap-&gt;RotateFlip(Rotate270FlipNone);  
}  

CLSID pngClsid;   
GetEncoderClsid(L"image/png", &amp;pngClsid);   
CString strpathName=strClipDir;  
strpathName+="\\";  
strpathName+=pngcfg.strName;  
pBitmap-&gt;Save(strpathName, &amp;pngClsid, NULL);  
delete pBitmap;  
delete pWrapBitmap;  
</code></pre>

<h3>6.效果图</h3>

<p>（1）鼠标移动到小图上，右上角显示当前位置所在的PNG名。单击小图，PNG名自动复制到剪切板。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131209081920468" alt="" border="0" title="1" /><br></br></div>


<p>（2）在列表中选择小图名字，软件自动显示红框。包裹该小图。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131209081956500" alt="" border="0" title="2" /><br></br></div>


<p>（3）点击裁剪PNG，弹出保存路径，选择保存路径确定,工作线程中处理PNG图的裁剪,PNG图裁剪成功,目录下可以看到裁剪后的小图，按照原来名字命名。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131209082032718" alt="" border="0" title="3" /><br></br></div>


<p>（4）直接拖拽PNG或者Plist进对话框，即可打开图像。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131207171220015" alt="" border="0" title="4" /><br></br></div>


<h3>7.下载地址</h3>

<p>v.1.3版</p>

<p>更新说明：</p>

<p><em>1.增加了直接拖拽PNG或者Plist进对话框即可打开的功能。</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6674999">下载地址</a></p>

<p>v.1.2版</p>

<p>更新说明：</p>

<p><em>1.增加PNG剪裁为小PNG功能</em></p>

<p><em>2.修正列表显示</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6440769">下载地址</a></p>

<p>v1.1版</p>

<p>更新说明：</p>

<p><em>1.修复旋转属性显示错误bug</em></p>

<p><em>2.修复png相对路径无法显示bug</em></p>

<p><em>3.增加双击列表显示红框功能</em></p>

<p><em>4.简化操作</em></p>

<p><em>5.修改icon</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6429297">下载地址</a></p>

<p>源码：<a href="https://github.com/fusijie/Anti_TexturePaker.git">https://github.com/fusijie/Anti_TexturePaker.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之四】cocos2d-x怎么实现跨平台]]></title>
    <link href="http://start530.github.io/blog/2013/10/11/play-cocos2dx-04/"/>
    <updated>2013-10-11T21:23:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/11/play-cocos2dx-04</id>
    <content type="html"><![CDATA[<p>cocos2d-x到底是怎样实现跨平台的呢？这里以Win32和Android为例。</p>

<h3>1.跨平台项目目录结构</h3>

<p>先看一下一个项目创建后的目录结构吧！这还是以HelloCpp为例。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131010095420500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="跨平台项目目录结构" /><br></br></div>


<p>从左边目录可以看到，Classes和Resource已经平台无关了，而Classes中包含了AppDelegate类，因此我们可以认为AppDelegate是与平台最接近的类，在它以上就要区分平台了。</p>

<h3>2.Win32下的实现</h3>

<p>在前一篇就介绍了Win32怎么开始cocos2dx，Win32平台下main.cpp就是程序入口：</p>

<pre><code>int APIENTRY _tWinMain(HINSTANCE hInstance,  
   HINSTANCE hPrevInstance,  
   LPTSTRlpCmdLine,  
   int   nCmdShow)  
{  
    UNREFERENCED_PARAMETER(hPrevInstance);  
    UNREFERENCED_PARAMETER(lpCmdLine);  

    // create the application instance  
    AppDelegate app;//创建应用实例  
    CCEGLView* eglView = CCEGLView::sharedOpenGLView();  
    eglView-&gt;setViewName("HelloCpp");  
    eglView-&gt;setFrameSize(2048, 1536);  
    eglView-&gt;setFrameZoomFactor(0.4f);  
    return CCApplication::sharedApplication()-&gt;run();//运行程序  
}  
</code></pre>

<p>Win32下的实现比较简单，就是正常的创建实例，运行就可以了。</p>

<h3>3.Android下的实现</h3>

<p><strong>3.1.cocos2d-x程序入口</strong></p>

<p>我们先看一下Android下cocos2d-x程序入口点在哪，我们知道Android是采用Java编写的，而cocos2d-x是c++编写的，所以如果要在Java中调用c++代码，那就需要采用JNI技术，看起来好像高端大气上档次，其实程序就是函数调用，也就是输入→处理→输出，所以JNI实际上简单抽象出来就这么回事：</p>

<p>java输入→Jni→c++输入→c++处理（API实现）→c++输出→Jni→java输出</p>

<p>在\proj.android\jni\hellocpp文件夹下可以找到main.cpp，这就是cocos2d-x的入口：</p>

<pre><code>jint JNI_OnLoad(JavaVM *vm, void *reserved)  
{  
    JniHelper::setJavaVM(vm);  

    return JNI_VERSION_1_4;  
}  

void Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit(JNIEnv*  env, jobject thiz, jint w, jint h)  
{  
    if (!CCDirector::sharedDirector()-&gt;getOpenGLView())  
    {  
        CCEGLView *view = CCEGLView::sharedOpenGLView();  
        view-&gt;setFrameSize(w, h);  

        AppDelegate *pAppDelegate = new AppDelegate();  
        CCApplication::sharedApplication()-&gt;run();  
    }  
    else  
    {  
        ccGLInvalidateStateCache();  
        CCShaderCache::sharedShaderCache()-&gt;reloadDefaultShaders();  
        ccDrawInit();  
        CCTextureCache::reloadAllTextures();  
        CCNotificationCenter::sharedNotificationCenter()-&gt;postNotification(EVENT_COME_TO_FOREGROUND, NULL);  
        CCDirector::sharedDirector()-&gt;setGLDefaultValues();   
    }  
}
</code></pre>

<p>里面包含了2个函数，JNI_OnLoad和Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit。我们看一下功能而先不管它在哪里被调用。</p>

<p><em>（1）JNI_OnLoad，</em>这个函数主要是用来高速Android VM当前使用的是什么版本是Jni，如果不提供此函数，则默认使用Jni1.1版本。</p>

<p><em>（2）Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit，</em>这个函数很明显就是运行一个cocos2d-x的应用实例了，这和Win32是一样的，当然它多了一个openGlView的检测。一旦调用了它那么cocos2d-x游戏启动。
接下来再看看它们是在哪里被调用的。</p>

<p><strong>3.2.JNI_OnLoad的调用</strong></p>

<p>在proj.android\src\org\cocos2dx\hellocpp目录下，可以看到Android的入口Activity，也就是HelloCpp，它继承自Cocos2dxActivity。</p>

<pre><code>public class HelloCpp extends Cocos2dxActivity{  

    protected void onCreate(Bundle savedInstanceState){  
    super.onCreate(savedInstanceState);  
    }  

static {  
     System.loadLibrary("hellocpp");  
    }  
}  
</code></pre>

<p>很简单的代码，因为功能都被封装到Cocos2dxActivity中了，所以OnCreate中调用了父类的OnCreate就把功能都实现了，而system.LoadLibrary就是载入编译出来的.so文件，此时就会执行JNI_OnLoad。</p>

<p><strong>3.3.Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit的调用</strong></p>

<p>那最重要的Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit是在哪调用呢？这就比较麻烦了，先大致了解一下Cocos2dxActivity做了一些什么事。</p>

<p>直接进入Cocos2dxActivity的OnCreate函数，它调用了一个init初始化函数：</p>

<pre><code>public void init() {  

    // 设置布局，是一个FrameLayout  
    ViewGroup.LayoutParams framelayout_params =  
    new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,  
                                   ViewGroup.LayoutParams.FILL_PARENT);  
    FrameLayout framelayout = new FrameLayout(this);  
    framelayout.setLayoutParams(framelayout_params);  

    // 设置Cocos2dxEditText布局，这一个跟GLSurfaceView兼容的edittext  
    ViewGroup.LayoutParams edittext_layout_params =  
    new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,  
                               ViewGroup.LayoutParams.WRAP_CONTENT);  
    Cocos2dxEditText edittext = new Cocos2dxEditText(this);  
    edittext.setLayoutParams(edittext_layout_params);  

    // 添加到framelaout  
    framelayout.addView(edittext);  

    // 创建Cocos2dxGLSurfaceView  
    this.mGLSurfaceView = this.onCreateView();  

    // 添加到framelaout  
    framelayout.addView(this.mGLSurfaceView);  

    // Switch to supported OpenGL (ARGB888) mode on emulator  
    if (isAndroidEmulator())  
       this.mGLSurfaceView.setEGLConfigChooser(8 , 8, 8, 8, 16, 0);  

    //设置Cocos2dxRenderer和Cocos2dxEditText  
    this.mGLSurfaceView.setCocos2dxRenderer(new Cocos2dxRenderer());  
    this.mGLSurfaceView.setCocos2dxEditText(edittext);  

    // 设置framelayout作为内容视图  
    setContentView(framelayout);  
} 
</code></pre>

<p>在这里Cocos2dxActivity做的就是创建Cocos2dxGLSurfaceView，并设置了Cocos2dxRenderer和Cocos2dxEditText，然后添加到FramLayout。具体的各部分实现这里就不贴代码了，画了个图：</p>

<div align="center"><img src="http://img.blog.csdn.net/20131010110524765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="Android调用流程" /><br></br></div>


<p>好了，就这样吧。因为我对Android界面开发，特别是OpenGLView这块也不熟，所以只能大概推出是这样子了，有什么错误，还请指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三】cocos2d-x游戏是怎么跑起来的]]></title>
    <link href="http://start530.github.io/blog/2013/10/10/play-cocos2dx-03/"/>
    <updated>2013-10-10T10:01:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/10/play-cocos2dx-03</id>
    <content type="html"><![CDATA[<p>虽然cocos2d-x v3.0 alpha版已经出来了，也改进了不少，有兴趣的可以去尝尝鲜。因为后面可能还会配合cocoStudio写一下博客，而现在v1.0.0.0版本需要配合cocos2d-x v2.2.0使用。所以这里选择了V2.2.0版的cocos2d-x。</p>

<p>一个新的东西，从头开始吧！从HelloWorld出发看一下一个cocos2d-x游戏是怎么跑起来的。先看看它的结构。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131003153415937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="结构" /><br></br></div>


<h3>1.main函数</h3>

<p>还是原来配方还是熟悉的味道。。。霸气的main函数依然是程序的入口点：</p>

<pre><code>//main.cpp  
int APIENTRY _tWinMain(HINSTANCE hInstance,  
   HINSTANCE hPrevInstance,  
   LPTSTRlpCmdLine,  
   int   nCmdShow)  
{  
UNREFERENCED_PARAMETER(hPrevInstance);//该宏用于通知编译器不用检测变量是否使用，如果你喜欢用LV4级的警告。  
UNREFERENCED_PARAMETER(lpCmdLine);  

// create the application instance  
AppDelegate app;//创建AppDelegate实例  
CCEGLView* eglView = CCEGLView::sharedOpenGLView();//获取CCEGLView的单一实例，因为还未创建，所以这里会进行创建  
eglView-&gt;setViewName("HelloCpp");//设置eglView属性  
eglView-&gt;setFrameSize(2048, 1536);  
eglView-&gt;setFrameZoomFactor(0.4f);  
return CCApplication::sharedApplication()-&gt;run();//调用run运行程序  
} 
</code></pre>

<p>其中：</p>

<p>（1）AppDelegate继承于CCApplication，是整个游戏的程序类，如果有用过MFC的就很清楚，类似于CxxxApp。</p>

<p>（2）CCEGLView封装了使用openGL作为显示底层API的一个基本的Windows窗体的创建和控制。
可以简单的认为，一个控制了程序的逻辑，而另一个负责游戏的显示。</p>

<h3>2.CCEGLView类</h3>

<p>我们先看看上一步的CCEGLView::sharedOpenGLView()做了什么。</p>

<pre><code>CCEGLView* CCEGLView::sharedOpenGLView()  
{
    if (s_pEglView == NULL)//s_pEglView是一个CCEGLView指针，静态成员变量  
    {  
        s_pEglView = new CCEGLView();  
        if(!s_pEglView-&gt;Create())//main中调用时，会执行这一步  
        {
            delete s_pEglView;  
            s_pEglView = NULL;  
        }
    }
return s_pEglView;  
}  
</code></pre>

<p>再看看，create做了什么</p>

<pre><code>//...  
m_hWnd = CreateWindowEx(   // 创建窗体  
WS_EX_APPWINDOW | WS_EX_WINDOWEDGE,// Extended Style For The Window  
kWindowClassName,// Class Name  
wszBuf,// Window Title  
WS_CAPTION | WS_POPUPWINDOW | WS_MINIMIZEBOX,// Defined Window Style  
0, 0,// Window Position  
1000,   // Window Width  
1000,   // Window Height  
NULL,// No Parent Window  
NULL,// No Menu  
hInstance,// Instance  
NULL );  
</code></pre>

<p>看到上面这一步了吧，使用Win32写过窗体的童鞋，就知道创建一个窗体需要哪些动作：</p>

<p><em>（1）填充窗口类结构WNDCLASS</em></p>

<p><em>（2）注册窗口</em></p>

<p><em>（3）创建窗口</em></p>

<p><em>（4）显示窗口</em>（这一步没有在CCEGLView中实现，而是在后面的CCApplication中实现，因为这里窗口的属性还没有进行设置）</p>

<p>一样的，创建一个cocos2d-x的win32窗口也是要经过这些步骤。具体的就看源码吧，这里不逐句解释了。就是要注意有个WinProc函数，是用于处理主窗口消息。</p>

<h3>3.CCApplication类</h3>

<p>我们再看看CCApplication::sharedApplication()&ndash;>run()执行的又是什么东西。</p>

<pre><code>int CCApplication::run()  
{  
    PVRFrameEnableControlWindow(false);  

    // Main message loop:  
    MSG msg;  
    LARGE_INTEGER nFreq;  
    LARGE_INTEGER nLast;  
    LARGE_INTEGER nNow;  

    QueryPerformanceFrequency(&amp;nFreq);//获取当前系统频率和计数  
    QueryPerformanceCounter(&amp;nLast);  

    // Initialize instance and cocos2d.  
    if (!applicationDidFinishLaunching())//虚函数，调用子类的重载，这里也会设置一些显示窗口的属性  
    {  
        return 0;  
    }  

    CCEGLView* pMainWnd = CCEGLView::sharedOpenGLView();获取CCEGLView的单一实例  
    pMainWnd-&gt;centerWindow();  
    ShowWindow(pMainWnd-&gt;getHWnd(), SW_SHOW);//这里显示窗口  

    while (1)//消息循环  
    {  
        if (! PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))  
        {  
            // 获取当前的计数  
            QueryPerformanceCounter(&amp;nNow);  

            // 判断时间流逝，是否该绘制下一帧  
            if (nNow.QuadPart - nLast.QuadPart &gt; m_nAnimationInterval.QuadPart)  
            {  
                nLast.QuadPart = nNow.QuadPart;  
                CCDirector::sharedDirector()-&gt;mainLoop();//渲染场景（清除显示设备，重绘场景）  
            }  
            else  
            {  
                Sleep(0);  
            }  
            continue;  
        }  

        if (WM_QUIT == msg.message)//获取退出消息，跳出循环  
        {  
            // Quit message loop.  
            break;  
        }  

        // 处理Windows消息  
        if (! m_hAccelTable || ! TranslateAccelerator(msg.hwnd, m_hAccelTable, &amp;msg))  
        {  
            TranslateMessage(&amp;msg);  
            DispatchMessage(&amp;msg);  
        }  
    }
    return (int) msg.wParam;  
}  
</code></pre>

<p>好了，解释的应该算比较清楚了，虽然没有每一个函数都进去。。。这里再总结一下：</p>

<p>（1）首先先获取当前系统的频率和计数。这是一个很大的值，所以用了一个LARGE_INTEGER型变量来存储。</p>

<p>（2）调用子类的applicationDidFinishLaunching()，执行进入程序后的一些初始化工作。</p>

<p>（3）获取CCEGLView单例，显示窗口。</p>

<p>（4）进入循环While(1)，重绘每一帧的场景。</p>

<p>好了，更多关于CCApplication的请看源码吧。</p>

<h3>4.AppDelegate类</h3>

<p>从上面的分析我们知道CCApplication::run()函数中会调用子类（AppDelegate）的applicationDidFinishLaunching函数，而这里也就是我们要设置窗口属性和运行游戏的地方了。</p>

<pre><code>bool AppDelegate::applicationDidFinishLaunching() {  
//第一次初始化导演，导演也是个单例类  
CCDirector* pDirector = CCDirector::sharedDirector();  

//获得CCEGLView单例，设置窗口属性和fps等等  
CCEGLView* pEGLView = CCEGLView::sharedOpenGLView();  

...  

// 创建场景  
CCScene *pScene = HelloWorld::scene();  

// 进入场景  
pDirector-&gt;runWithScene(pScene);  

return true;  
}  
</code></pre>

<p>好了，最后再总结成一张图，cocos2d-x游戏就是这么跑起来的~</p>

<div align="center"><img src="http://img.blog.csdn.net/20131003172159765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="结构" /><br></br></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二】游戏和引擎构成]]></title>
    <link href="http://start530.github.io/blog/2013/10/09/play-cocos2dx-02/"/>
    <updated>2013-10-09T16:53:00+08:00</updated>
    <id>http://start530.github.io/blog/2013/10/09/play-cocos2dx-02</id>
    <content type="html"><![CDATA[<h3>1.游戏构成</h3>

<p>我们以超级马里奥游戏作为蓝本来描述一下一个游戏的构成。</p>

<p>1.首先我们需要一个容器来放置游戏元素，每一个关卡都是一个容器，这叫场景。</p>

<p>2.蓝天白云，各种板砖水管，这些是布景，放置在关卡中，通过布景的叠加，构成了游戏的主要背景。</p>

<p>3.主角马里奥兄弟和各种小怪兽，这些叫精灵。这是游戏互动的主要元素。</p>

<!-- more -->


<p>4.马里奥可以走路，可以跳跃，可以发射子弹。这些是精灵的动作。</p>

<p>5.过关了，要进入下一关，这些需要幕后导演的控制。</p>

<p>以上几个部分，在cocos2dx中，分别叫做<strong>CCScene</strong>，<strong>CCLayer</strong>，<strong>CCSprite</strong>，<strong>CCAction</strong>，<strong>CCDirector</strong>。而这五个部分是构成游戏的最基本元素。</p>

<p>用一张图来看看它们的关系。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131008150731968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="游戏构成" /><br></br></div>


<h3>2.引擎构成</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131008155353093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="引擎构成" /><br></br></div>


<p>引擎目录的具体介绍如下：</p>

<p>（1）<em>cocos2dx</em>，cocos2d-x游戏引擎核心部分，存放了引擎源码。</p>

<p>（2）<em>CocosDenshion</em>，游戏声音引擎主要文件。</p>

<p>（3）<em>Debug.win32</em>，Release.win32，win32下的项目debug/release目录。</p>

<p>（4）<em>document</em>，帮助文档目录，可以用doxygen生成项目文档。</p>

<p>（5）<em>extensions</em>，引擎扩展包，包含了一些本地存储类，网络传输类，GUI类等等。</p>

<p>（6）<em>external</em>，存放了Box2D，chipmunk物理引擎源码等第三方库。</p>

<p>（7）<em>licenses</em>，存放了一些许可文件。</p>

<p>（8）<em>plugin</em>，插件工具集，还包含了一些广告，微博调用示例。</p>

<p>（9）<em>projects</em>，开发者创建的项目。</p>

<p>（10）<em>samples</em>，引擎自带示例，目前支持C++，js和Lua。</p>

<p>（11）<em>scripting</em>，js和lua脚本的相关源文件。</p>

<p>（12）<em>template</em>，C++，js和Lua的各平台模版。</p>

<p>（13）<em>tools</em>，cocos2dx的工具集，创建项目也在里面。</p>

<p>（14）剩下一些各平台的编译文件，创建文件，以及cocos2dx的更新说明，作者说明等等。</p>
]]></content>
  </entry>
  
</feed>
