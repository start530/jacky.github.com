<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 常用接口 | Jacky's Blog]]></title>
  <link href="http://www.fusijie.com/tags/chang-yong-jie-kou/atom.xml" rel="self"/>
  <link href="http://www.fusijie.com/"/>
  <updated>2014-05-06T22:14:46+08:00</updated>
  <id>http://www.fusijie.com/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之六】节点类CCNode]]></title>
    <link href="http://www.fusijie.com/blog/2013/10/14/play-cocos2dx-06/"/>
    <updated>2013-10-14T22:06:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/10/14/play-cocos2dx-06</id>
    <content type="html"><![CDATA[<p>节点类CCNode可以说是游戏元素的祖宗了，基本上我们看得到的游戏元素都是以它为原型进行扩展的。像CCScene，CCLayer，CCSprite，CCMenu，CCSpriteBatchNode等等都是从CCNode继承而来。另外如果我们要自定义精灵，那么从CCNode继承也是一个很不错的选择。</p>

<!-- more -->


<h3>1.概况</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131012102206812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCNode" /><br></br></div>


<p>CCNode直接从CCObject继承而来，有如下几个特点：</p>

<p><em>（1）可以包含其他CCNode节点，可以进行添加/获取/删除子节点操作。</em></p>

<p><em>（2）可以执行周期性的回调任务。</em></p>

<p><em>（3）可以执行动作。</em></p>

<p>一些子类化的节点提供了更为丰富的特性和功能。</p>

<h3>2.属性</h3>

<pre><code>Features of CCNode:  
- position   //位置，默认(0,0)  
- scale (x, y)   //缩放，默认(1,1)  
- rotation (in degrees, clockwise)   //旋转，默认为0  
- skew   //倾斜，默认为0  
- CCCamera (an interface to gluLookAt )  //CCCamera，视点转换，每个节点都有，默认指向节点中心  
- CCGridBase (to do mesh transformations)//CCGridBase，网类转变  
- anchor point   //锚点，默认(0,0)  
- size   //尺寸，默认(0,0)  
- visible//可见  
- z-order//z轴值  
- openGL z position  //OpenGL z值  
</code></pre>

<h3>3.接口</h3>

<p><strong>3.1.初始化</strong></p>

<pre><code>//初始化函数，成功返回true  
virtual bool init();  

//分配内存空间，调用init并添加autoRelease标记  
static CCNode * create(void);  

//返回描述字符串  
const char* description(void);  
</code></pre>

<p><strong>3.2.图形属性</strong></p>

<pre><code>//设置/获取Z轴顺序，Z轴大的覆盖Z轴小的  
virtual void setZOrder(int zOrder);  
virtual void _setZOrder(int z);  
virtual int getZOrder();  

//设置/获取OpenGL Z轴顶点  
virtual void setVertexZ(float vertexZ);  
virtual float getVertexZ();  

//设置/获取缩放值  
virtual void setScaleX(float fScaleX);  
virtual float getScaleX();  
virtual void setScaleY(float fScaleY);  
virtual float getScaleY();  
virtual void setScale(float scale);  
virtual float getScale();  
virtual void setScale(float fScaleX,float fScaleY);  

//设置/获取位置  
virtual void setPosition(const CCPoint &amp;position);  
virtual const CCPoint&amp; getPosition();  
virtual void setPosition(float x, float y);  
virtual void getPosition(float* x, float* y);  
virtual void  setPositionX(float x);  
virtual float getPositionX(void);  
virtual void  setPositionY(float y);  
virtual float getPositionY(void);  

//设置/获取倾斜角度  
virtual void setSkewX(float fSkewX);  
virtual float getSkewX();  
virtual void setSkewY(float fSkewY);  
virtual float getSkewY();  

//设置/获取锚点  
virtual void setAnchorPoint(const CCPoint&amp; anchorPoint);  
virtual const CCPoint&amp; getAnchorPoint();  
virtual const CCPoint&amp; getAnchorPointInPoints();  

//设置/获取大小  
virtual void setContentSize(const CCSize&amp; contentSize);  
virtual const CCSize&amp; getContentSize() const;  

//设置/获取可见性  
virtual void setVisible(bool visible);  
virtual bool isVisible();  

//设置/获取旋转角度  
virtual void setRotation(float fRotation);  
virtual float getRotation();  
virtual void setRotationX(float fRotaionX);  
virtual float getRotationX();  
virtual void setRotationY(float fRotationY);  
virtual float getRotationY();  
</code></pre>

<p><strong>3.3.节点操作</strong></p>

<pre><code>//添加/获取子节点，可以带Z轴顺序（默认为0）和标签  
virtual void addChild(CCNode * child);  
virtual void addChild(CCNode * child, int zOrder);  
virtual void addChild(CCNode* child, int zOrder, int tag);  
CCNode * getChildByTag(int tag);  
virtual CCArray* getChildren();  
unsigned int getChildrenCount(void) const;  

//设置/获取父节点  
virtual void setParent(CCNode* parent);  
virtual CCNode* getParent();  

//从父节点中移除自身，默认cleanup为true  
virtual void removeFromParent();  
virtual void removeFromParentAndCleanup(bool cleanup);  

//移除子节点  
virtual void removeChild(CCNode* child);  
virtual void removeChild(CCNode* child, bool cleanup);  
virtual void removeChildByTag(int tag);  
virtual void removeChildByTag(int tag, bool cleanup);  

//移除所有节点  
virtual void removeAllChildren();  
virtual void removeAllChildrenWithCleanup(bool cleanup);  

//重新设置节点顺序  
virtual void reorderChild(CCNode * child, int zOrder);  
</code></pre>

<p><strong>3.4.标签和用户数据</strong></p>

<pre><code>//设置/获取tag  
virtual int getTag() const;  
virtual void setTag(int nTag);  

//设置/获取userdata，它是一个指针可以指向你想要的任意数据块，不过记得要释放  
virtual void* getUserData();  
virtual void setUserData(void *pUserData);  

//设置/获取CCObject，和上面一样，只是数据换成了CCObject对象  
virtual CCObject* getUserObject();  
virtual void setUserObject(CCObject *pUserObject);  
</code></pre>

<p><strong>3.5.事件回调</strong></p>

<pre><code>//事件回调
//节点开始进入触发  
virtual void onEnter();  
//节点完成进入触发  
virtual void onEnterTransitionDidFinish();  
//节点退出触发  
virtual void onExit();  
//如果节点退出有过渡动画，动画开始时触发  
virtual void onExitTransitionDidStart();  
//停止动画和调度器  
virtual void cleanup(void);  
</code></pre>

<p><strong>3.6.动作</strong></p>

<pre><code>//获取/设置动作管理器
virtual void setActionManager(CCActionManager* actionManager);  
virtual CCActionManager* getActionManager();  

//运行动作  
CCAction* runAction(CCAction* action);  

//停止动作  
void stopAllActions(void);  
void stopAction(CCAction* action);  
void stopActionByTag(int tag);  
CCAction* getActionByTag(int tag);  

//获取正在运行动作数  
unsigned int numberOfRunningActions(void);  
</code></pre>

<p><strong>3.7.调度器和定时器</strong></p>

<pre><code>//获取/设置调度器  
virtual void setScheduler(CCScheduler* scheduler);  
virtual CCScheduler* getScheduler();  

//检测某个调度器是否有在运行  
bool isScheduled(SEL_SCHEDULE selector);  

//开启update调度  
void scheduleUpdate(void);  
//设置调度优先级  
void scheduleUpdateWithPriority(int priority);  
//关闭update调度器  
void unscheduleUpdate(void);  

//开启/关闭/恢复/暂停调度器  
void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);  
void schedule(SEL_SCHEDULE selector, float interval);  
void scheduleOnce(SEL_SCHEDULE selector, float delay);  
void schedule(SEL_SCHEDULE selector);  
void unschedule(SEL_SCHEDULE selector);  
void unscheduleAllSelectors(void);  
void resumeSchedulerAndActions(void);  
void pauseSchedulerAndActions(void);  

//每帧调用函数  
virtual void update(float delta);  
</code></pre>

<p><strong>3.8.坐标转换</strong></p>

<pre><code>//坐标转换相关，这一部分后面再介绍  
CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);  
CCPoint convertTouchToNodeSpace(CCTouch * touch);  
CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);  
</code></pre>

<p><strong>3.9.其他</strong></p>

<pre><code>//获取/设置着色程序  
virtual CCGLProgram* getShaderProgram();  
virtual void setShaderProgram(CCGLProgram *pShaderProgram);  

//获取CCCamera对象  
virtual CCCamera* getCamera();  

//节点是否在运行  
virtual bool isRunning();  

//绘制节点  
virtual void draw(void);  
//递归访问节点  
virtual void visit(void);  

//返回所占矩形，节点坐标系  
CCRect boundingBox(void);  
</code></pre>

<h3>4.CCNodeRGBA</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131012102337687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCNodeRGBA" /><br></br></div>


<p>CCNodeRGBA继承于CCNode，所以它拥有CCNode的所有特性，并且它也继承于CCRGBAProtocol。从名字看来我们就知道它是一个带有颜色和透明度的节点。</p>

<p>所以它比起CCNode就多了2个特性，Opacity和RGB值。</p>

<p>如果要给子节点传递透明度属性，那么需要设置setCascadeOpacityEnabled(true)，如果传递的过程中遇到了CCNode，那么传递会中断。颜色值的传递也是一样的道理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之五】导演类CCDirector]]></title>
    <link href="http://www.fusijie.com/blog/2013/10/12/play-cocos2dx-05/"/>
    <updated>2013-10-12T21:49:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/10/12/play-cocos2dx-05</id>
    <content type="html"><![CDATA[<p>既然cocos2d-x都帮我们封装好了，使得开发与平台无关，那接下来我们就单纯地开始好好玩游戏吧！这几篇是对cocos2d-x一些基本且重要的元素进行解释和API介绍，之前没有系统的看过API，有时候某些功能引擎都已经提供好了，不知道还是会自己去写。所以全面地了解一下是必须的。</p>

<!-- more -->


<h3>1.概况</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131012091844921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCDirector" /><br></br></div>


<p>导演类CCDirector是cocos2d-x引擎中非常重要的一个类，它是一个抽象类（mainloop空实现），主要完成以下工作：</p>

<p>（1）初始化游戏和销毁游戏</p>

<p>（2）管理调度场景</p>

<p>（3）调整设置openGL信息</p>

<p>（4）获取、设置游戏的相关细节</p>

<p>CCDirector是单例类，直接从CCObject继承而来，它在cocos2d-x中的首次创建位置在上一篇已经介绍了。因此后面的CCDirector调用可采用如下方式：</p>

<pre><code>CCDirector::sharedDirector()-&gt;methodname;
</code></pre>

<h3>2.常用接口</h3>

<p><strong>2.1.属性</strong></p>

<pre><code>//获得当前运行场景，cocos2dx同时只能运行一个场景  
CCScene* getRunningScene(void);  

//获取fps  
double getAnimationInterval(void);  
//设置fps  
virtual void setAnimationInterval(double dValue);  

//是否显示fps  
bool isDisplayStats(void);  
//设置是否显示fps  
void setDisplayStats(bool bDisplayStats);  

//每帧秒数  
float getSecondsPerFrame();  

//获取openGLView  
CCEGLView* getOpenGLView(void);  
//设置openGLView  
void setOpenGLView(CCEGLView *pobOpenGLView);  

//释放暂停  
bool isPaused(void);  

//获取调用到现在的所有帧数  
unsigned int getTotalFrames(void);  

//是否接收到cleanup事件，replace会，而push不会  
bool isSendCleanupToScene(void);  
</code></pre>

<p><strong>2.2.窗口</strong></p>

<pre><code>//返回openGLView的大小，单位为点  
CCSize getWinSize(void);  

//返回openGLView的大小，单位为像素  
CCSize getWinSizeInPixels(void);  

//返回可见区域的大小，单位为点，如果没调用setDesignResolutionSize，就和getWinSize是一样的  
CCSize getVisibleSize();  

//返回可见区域的原点  
CCPoint getVisibleOrigin();  

//将UIKit坐标体系转换成OpenGL坐标体系  
CCPoint convertToGL(const CCPoint&amp; obPoint);  

//将OpenGL坐标体系转换成UIKit坐标体系
CCPoint convertToUI(const CCPoint&amp; obPoint);  
</code></pre>

<p><strong>2.3.场景管理</strong></p>

<pre><code>//调用第一个场景，当前不能有场景运行  
void runWithScene(CCScene *pScene);  

//场景入栈，当前必须有场景  
void pushScene(CCScene *pScene);  

//场景出栈，删除当前场景，当前必须有场景  
void popScene(void);  

//弹出所有场景，直至根场景  
void popToRootScene(void);  

//弹出至指定场景  
void popToSceneStackLevel(int level);  

//用新场景替代旧场景  
void replaceScene(CCScene *pScene);  

//结束运行，释放场景，必须手动调用  
void end(void);  

//暂停场景  
void pause(void);  

//恢复场景  
void resume(void);  

//暂停所有动画  
virtual void stopAnimation(void);  

//开始所有动画  
virtual void startAnimation(void);  
</code></pre>

<p><strong>2.4.内存和OpenGL</strong></p>

<pre><code>//移除所有cocos2dx缓冲数据  
void purgeCachedData(void);  

//设置默认值  
void setDefaultValues(void);  

//设置OpenGL默认值  
void setGLDefaultValues(void);  

//开关OpenGL alpha混合通道  
void setAlphaBlending(bool bOn);  

//设置景深测试  
void setDepthTest(bool bOn);  
</code></pre>

<h3>3.CCDisplayLinkDirector</h3>

<p>CCDisplayLinkDirector继承于CCDirector，它实现了mainloop函数，是一个以显示刷新速度同步定时器的Director，也就是可以自动刷新的导演类，它支持60，30，15三种帧数。我们平时使用的也就是它。</p>
]]></content>
  </entry>
  
</feed>
